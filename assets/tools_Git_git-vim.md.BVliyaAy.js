import{_ as i,c as a,o as t,a3 as p}from"./chunks/framework.C_bjHMch.js";const u=JSON.parse('{"title":"常用Git命令总结","description":"","frontmatter":{},"headers":[],"relativePath":"tools/Git/git-vim.md","filePath":"tools/Git/git-vim.md"}'),l={name:"tools/Git/git-vim.md"},e=p('<h1 id="常用git命令总结" tabindex="-1">常用Git命令总结 <a class="header-anchor" href="#常用git命令总结" aria-label="Permalink to &quot;常用Git命令总结&quot;">​</a></h1><ul><li>git config --global user.name &quot;你的名字&quot; 让你全部的Git仓库绑定你的名字</li><li>git config --global user.email &quot;你的邮箱&quot; 让你全部的Git仓库绑定你的邮箱</li><li>git init 初始化你的仓库</li><li>git add . 把工作区的文件全部提交到暂存区</li><li>git add ./(file)/ 把工作区的(file)文件提交到暂存区</li><li>git commit -m &quot;xxx&quot; 把暂存区的所有文件提交到仓库区，暂存区空空荡荡</li><li>git remote add origin <a href="https://github.com/name/name_cangku.git" target="_blank" rel="noreferrer">https://github.com/name/name_cangku.git</a> 把本地仓库与远程仓库连接起来</li><li>git push -u origin master 把仓库区的主分支master提交到远程仓库里</li><li>git push -u origin (其他分支) 把其他分支提交到远程仓库</li><li>git status查看当前仓库的状态</li><li>git diff 查看文件修改的具体内容</li><li>git log 显示从最近到最远的提交历史 git log --pretty=oneline(更简洁的方式显示)</li><li>git clone + 仓库地址下载克隆文件</li><li>git reset --hard + 版本号 回溯版本，版本号在commit的时候与master跟随在一起</li><li>git reflog 显示命令历史</li><li>git checkout -- (file) 撤销命令，用版本库里的文件替换掉工作区的文件。我觉得就像是Git世界的ctrl + z</li><li>git rm 删除版本库的文件</li><li>git branch 查看当前所有分支</li><li>git branch (分支名字) 创建分支</li><li>git checkout (分支名字) 切换到分支</li><li>git merge (分支名字) 合并分支</li><li>git branch -d (分支名字) 删除分支,有可能会删除失败，因为Git会保护没有被合并的分支</li><li>git branch -D + (分支名字) 强行删除，丢弃没被合并的分支</li><li>git log --graph 查看分支合并图</li><li>git merge --no-ff (分支名字) 合并分支的时候禁用Fast forward模式,因为这个模式会丢失分支历史信息</li><li>git stash 当有其他任务插进来时，把当前工作现场“存储”起来,以后恢复后继续工作</li><li>git stash list 查看你刚刚“存放”起来的工作去哪里了</li><li>git stash apply 恢复却不删除stash内容</li><li>git stash drop 删除stash内容</li><li>git stash pop 恢复的同时把stash内容也删了</li><li>git remote 查看远程库的信息，会显示origin，远程仓库默认名称为origin</li><li>git remote -v 显示更详细的信息</li><li>git pull 把最新的提交从远程仓库中抓取下来，在本地合并,和git push相反</li><li>git rebase 把分叉的提交历史“整理”成一条直线，看上去更直观</li><li>git tag 查看所有标签，可以知道历史版本的tag</li><li>git tag (name) 打标签，默认为HEAD。比如git tag v1.0</li><li>git tag (tagName) (版本号) 把版本号打上标签，版本号就是commit时，跟在旁边的一串字母数字</li><li>git show (tagName) 查看标签信息</li><li>git tag -a (tagName) -m &quot;(说明)&quot; 创建带说明的标签。-a指定标签名，-m指定说明文字</li><li>git tag -d (tagName) 删除标签</li><li>git push origin (tagname) 推送某个标签到远程</li><li>git push origin --tags 一次性推送全部尚未推送到远程的本地标签</li><li>git push origin :refs/tags/(tagname) 删除远程标签(tagname)</li><li>git config --global color.ui true 让Git显示颜色，会让命令输出看起来更醒目</li><li>git add -f (file) 强制提交已忽略的的文件</li><li>git check-ignore -v (file) 检查为什么Git会忽略该文件</li></ul><h1 id="vim常用指令" tabindex="-1">vim常用指令 <a class="header-anchor" href="#vim常用指令" aria-label="Permalink to &quot;vim常用指令&quot;">​</a></h1><h2 id="vim-进入和退出命令" tabindex="-1">VIM 进入和退出命令 <a class="header-anchor" href="#vim-进入和退出命令" aria-label="Permalink to &quot;VIM 进入和退出命令&quot;">​</a></h2><blockquote><p>常用命令是ESC，然后:wq（保存并退出），:q!(不保存并强制退出），i进入vim模式。另外还有其它的，我可能都不会用到。。。 按ESC键 跳到命令模式，然后：</p></blockquote><ol><li><strong>:w 保存文件但不退出vi</strong></li><li><strong>:w file 将修改另外保存到file中，不退出vi</strong></li><li><strong>:w! 强制保存，不推出vi</strong></li><li><strong>:wq 保存文件并退出vi</strong></li><li><strong>:wq! 强制保存文件，并退出vi</strong></li><li><strong>q: 不保存文件，退出vi</strong></li><li><strong>:q! 不保存文件，强制退出vi</strong></li><li><strong>:e! 放弃所有修改，从上次保存文件开始再编辑</strong></li></ol><h2 id="命令历史" tabindex="-1">命令历史 <a class="header-anchor" href="#命令历史" aria-label="Permalink to &quot;命令历史&quot;">​</a></h2><p>以:和/开头的命令都有历史纪录，可以首先键入:或/然后按上下箭头来选择某个历史命令。</p><h2 id="启动vim" tabindex="-1">启动vim <a class="header-anchor" href="#启动vim" aria-label="Permalink to &quot;启动vim&quot;">​</a></h2><p>在命令行窗口中输入以下命令即可</p><p>vim 直接启动vim</p><p>vim filename 打开vim并创建名为filename的文件</p><h2 id="文件命令" tabindex="-1">文件命令 <a class="header-anchor" href="#文件命令" aria-label="Permalink to &quot;文件命令&quot;">​</a></h2><p>打开单个文件</p><p>vim file</p><p>同时打开多个文件</p><p>vim file1 file2 file3 ...</p><p>在vim窗口中打开一个新文件</p><p>:open file</p><p>在新窗口中打开文件</p><p>:split file</p><p>切换到下一个文件</p><p>:bn</p><p>切换到上一个文件</p><p>:bp</p><p>查看当前打开的文件列表，当前正在编辑的文件会用[]括起来。</p><p>:args</p><p>打开远程文件，比如ftp或者share folder</p><p>:e <a href="ftp://192.168.10.76/abc.txt" target="_blank" rel="noreferrer">ftp://192.168.10.76/abc.txt</a></p><p>:e \\qadrive\\test\\1.txt</p><h2 id="vim的模式" tabindex="-1">vim的模式 <a class="header-anchor" href="#vim的模式" aria-label="Permalink to &quot;vim的模式&quot;">​</a></h2><p>正常模式（按Esc或Ctrl+[进入） 左下角显示文件名或为空 插入模式（按i键进入） 左下角显示--INSERT-- 可视模式（不知道如何进入） 左下角显示--VISUAL--</p><h2 id="导航命令" tabindex="-1">导航命令 <a class="header-anchor" href="#导航命令" aria-label="Permalink to &quot;导航命令&quot;">​</a></h2><p>% 括号匹配</p><h2 id="插入命令" tabindex="-1">插入命令 <a class="header-anchor" href="#插入命令" aria-label="Permalink to &quot;插入命令&quot;">​</a></h2><p>i 在当前位置生前插入</p><p>I 在当前行首插入</p><p>a 在当前位置后插入</p><p>A 在当前行尾插入</p><p>o 在当前行之后插入一行</p><p>O 在当前行之前插入一行</p><h2 id="查找命令" tabindex="-1">查找命令 <a class="header-anchor" href="#查找命令" aria-label="Permalink to &quot;查找命令&quot;">​</a></h2><p>/text　　查找text，按n健查找下一个，按N健查找前一个。</p><p>?text　　查找text，反向查找，按n健查找下一个，按N健查找前一个。</p><p>vim中有一些特殊字符在查找时需要转义　　.*[]^%/?~$</p><p>:set ignorecase　　忽略大小写的查找</p><p>:set noignorecase　　不忽略大小写的查找</p><p>查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于/搜索。而#命令相当于?搜索。</p><p>:set hlsearch　　高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。</p><p>:set nohlsearch　　关闭高亮搜索显示</p><p>:nohlsearch　　关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。</p><p>:set incsearch　　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。</p><p>:set wrapscan　　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。</p><h2 id="替换命令" tabindex="-1">替换命令 <a class="header-anchor" href="#替换命令" aria-label="Permalink to &quot;替换命令&quot;">​</a></h2><p>ra 将当前字符替换为a，当期字符即光标所在字符。</p><p>s/old/new/ 用old替换new，替换当前行的第一个匹配</p><p>s/old/new/g 用old替换new，替换当前行的所有匹配</p><p>%s/old/new/ 用old替换new，替换所有行的第一个匹配</p><p>%s/old/new/g 用old替换new，替换整个文件的所有匹配</p><p>:10,20 s/^/ /g 在第10行知第20行每行前面加四个空格，用于缩进。</p><p>ddp 交换光标所在行和其下紧邻的一行。</p><h2 id="移动命令" tabindex="-1">移动命令 <a class="header-anchor" href="#移动命令" aria-label="Permalink to &quot;移动命令&quot;">​</a></h2><p>h 左移一个字符 l 右移一个字符，这个命令很少用，一般用w代替。 k 上移一个字符 j 下移一个字符 以上四个命令可以配合数字使用，比如20j就是向下移动20行，5h就是向左移动5个字符，在Vim中，很多命令都可以配合数字使用，比如删除10个字符10x，在当前位置后插入3个！，3a！(Esc)，这里的Esc是必须的，否则命令不生效。</p><p>w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替l命令。</p><p>b 向后移动一个单词 2b 向后移动2个单词</p><p>e，同w，只不过是光标停在单词尾部</p><p>ge，同b，光标停在单词尾部。</p><p>^ 移动到本行第一个非空白字符上。</p><p>0（数字0）移动到本行第一个字符上，</p><p>(HOME) 移动到本行第一个字符。同0健。</p><p>$ 移动到行尾 3$ 移动到下面3行的行尾</p><p>gg 移动到文件头。 = [[</p><p>G（shift + g） 移动到文件尾。 = ]]</p><p>f（find）命令也可以用于移动，fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。</p><p>F 同f，反向查找。</p><p>跳到指定行，冒号+行号，回车，比如跳到240行就是 :240回车。另一个方法是行号+G，比如230G跳到230行。</p><p>Ctrl + e 向下滚动一行</p><p>Ctrl + y 向上滚动一行</p><p>Ctrl + d 向下滚动半屏</p><p>Ctrl + u 向上滚动半屏</p><p>Ctrl + f 向下滚动一屏</p><p>Ctrl + b 向上滚动一屏</p><h2 id="撤销和重做" tabindex="-1">撤销和重做 <a class="header-anchor" href="#撤销和重做" aria-label="Permalink to &quot;撤销和重做&quot;">​</a></h2><p>u 撤销（Undo） U 撤销对整行的操作 Ctrl + r 重做（Redo），即撤销的撤销。</p><h2 id="删除命令" tabindex="-1">删除命令 <a class="header-anchor" href="#删除命令" aria-label="Permalink to &quot;删除命令&quot;">​</a></h2><p>x 删除当前字符</p><p>3x 删除当前光标开始向后三个字符</p><p>X 删除当前字符的前一个字符。X=dh</p><p>dl 删除当前字符， dl=x</p><p>dh 删除前一个字符</p><p>dd 删除当前行</p><p>dj 删除上一行</p><p>dk 删除下一行</p><p>10d 删除当前行开始的10行。</p><p>D 删除当前字符至行尾。D=d$</p><p>d$ 删除当前字符之后的所有字符（本行）</p><p>kdgg 删除当前行之前所有行（不包括当前行）</p><p>jdG（jd shift + g） 删除当前行之后所有行（不包括当前行）</p><p>:1,10d 删除1-10行</p><p>:11,$d 删除11行及以后所有的行</p><p>:1,$d 删除所有行</p><p>J(shift + j)　　删除两行之间的空行，实际上是合并两行。</p><h2 id="拷贝和粘贴" tabindex="-1">拷贝和粘贴 <a class="header-anchor" href="#拷贝和粘贴" aria-label="Permalink to &quot;拷贝和粘贴&quot;">​</a></h2><p>yy 拷贝当前行</p><p>nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。</p><p>p 在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。</p><p>shift+p 在当前行前粘贴</p><p>:1,10 co 20 将1-10行插入到第20行之后。</p><p>:1,$ co $ 将整个文件复制一份并添加到文件尾部。</p><p>正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制</p><p>ddp交换当前行和其下一行</p><p>xp交换当前字符和其后一个字符</p><h2 id="剪切命令" tabindex="-1">剪切命令 <a class="header-anchor" href="#剪切命令" aria-label="Permalink to &quot;剪切命令&quot;">​</a></h2><p>正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切</p><p>ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴</p><p>:1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。</p><p>:1, 10 m 20 将第1-10行移动到第20行之后。</p><h2 id="退出命令" tabindex="-1">退出命令 <a class="header-anchor" href="#退出命令" aria-label="Permalink to &quot;退出命令&quot;">​</a></h2><p>:wq 保存并退出</p><p>ZZ 保存并退出</p><p>:q! 强制退出并忽略所有更改</p><p>:e! 放弃所有修改，并打开原来文件。</p><h2 id="窗口命令" tabindex="-1">窗口命令 <a class="header-anchor" href="#窗口命令" aria-label="Permalink to &quot;窗口命令&quot;">​</a></h2><p>:split或new 打开一个新窗口，光标停在顶层的窗口上</p><p>:split file或:new file 用新窗口打开文件</p><p>split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。</p><p>Ctrl+ww 移动到下一个窗口</p><p>Ctrl+wj 移动到下方的窗口</p><p>Ctrl+wk 移动到上方的窗口</p><p>关闭窗口</p><p>:close 最后一个窗口不能使用此命令，可以防止意外退出vim。</p><p>:q 如果是最后一个被关闭的窗口，那么将退出vim。</p><p>ZZ 保存并退出。</p><p>关闭所有窗口，只保留当前窗口</p><p>:only</p><p>录制宏</p><p>按q键加任意字母开始录制，再按q键结束录制（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。</p><h2 id="执行shell命令" tabindex="-1">执行shell命令 <a class="header-anchor" href="#执行shell命令" aria-label="Permalink to &quot;执行shell命令&quot;">​</a></h2><p>:!command</p><p>:!ls 列出当前目录下文件</p><p>:!perl -c script.pl 检查perl脚本语法，可以不用退出vim，非常方便。</p><p>:!perl script.pl 执行perl脚本，可以不用退出vim，非常方便。</p><p>:suspend或Ctrl - Z 挂起vim，回到shell，按fg可以返回vim。</p><h2 id="注释命令" tabindex="-1">注释命令 <a class="header-anchor" href="#注释命令" aria-label="Permalink to &quot;注释命令&quot;">​</a></h2><p>perl程序中#开始的行为注释，所以要注释某些行，只需在行首加入#</p><p>3,5 s/^/#/g 注释第3-5行</p><p>3,5 s/^#//g 解除3-5行的注释</p><p>1,$ s/^/#/g 注释整个文档。</p><p>:%s/^/#/g 注释整个文档，此法更快。</p><h2 id="帮助命令" tabindex="-1">帮助命令 <a class="header-anchor" href="#帮助命令" aria-label="Permalink to &quot;帮助命令&quot;">​</a></h2><p>:help or F1 显示整个帮助 :help xxx 显示xxx的帮助，比如 :help i, :help CTRL-[（即Ctrl+[的帮助）。 :help &#39;number&#39; Vim选项的帮助用单引号括起 :help (Esc) 特殊键的帮助用()扩起 :help -t Vim启动参数的帮助用- ：help i_(Esc) 插入模式下Esc的帮助，某个模式下的帮助用模式_主题的模式 帮助文件中位于||之间的内容是超链接，可以用Ctrl+]进入链接，Ctrl+o（Ctrl + t）返回</p><h2 id="其他非编辑命令" tabindex="-1">其他非编辑命令 <a class="header-anchor" href="#其他非编辑命令" aria-label="Permalink to &quot;其他非编辑命令&quot;">​</a></h2><p>. 重复前一次命令</p><p>:set ruler?　　查看是否设置了ruler，在.vimrc中，使用set命令设制的选项都可以通过这个命令查看</p><p>:scriptnames　　查看vim脚本文件的位置，比如.vimrc文件，语法文件及plugin等。</p><p>:set list 显示非打印字符，如tab，空格，行尾等。如果tab无法显示，请确定用set lcs=tab:)-命令设置了.vimrc文件，并确保你的文件中的确有tab，如果开启了expendtab，那么tab将被扩展为空格。</p><p>Vim教程 在Unix系统上 $ vimtutor 在Windows系统上 :help tutor</p><p>:syntax 列出已经定义的语法项 :syntax clear 清除已定义的语法规则 :syntax case match 大小写敏感，int和Int将视为不同的语法元素 :syntax case ignore 大小写无关，int和Int将视为相同的语法元素，并使用同样的配色方案</p>',158),r=[e];function o(s,n,h,d,g,c){return t(),a("div",null,r)}const f=i(l,[["render",o]]);export{u as __pageData,f as default};
