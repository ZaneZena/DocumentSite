import{_ as s,c as a,o as e,a3 as n}from"./chunks/framework.C_bjHMch.js";const m=JSON.parse('{"title":"MySQL数据库","description":"","frontmatter":{},"headers":[],"relativePath":"serverend/Mysql/mysql.md","filePath":"serverend/Mysql/mysql.md"}'),l={name:"serverend/Mysql/mysql.md"},t=n(`<h1 id="mysql数据库" tabindex="-1">MySQL数据库 <a class="header-anchor" href="#mysql数据库" aria-label="Permalink to &quot;MySQL数据库&quot;">​</a></h1><h2 id="数据库的种类" tabindex="-1">数据库的种类 <a class="header-anchor" href="#数据库的种类" aria-label="Permalink to &quot;数据库的种类&quot;">​</a></h2><ul><li>关系型数据库 RDBMS （MySQL 、 SQL Server 、 Oracle 、 DB2 ）</li><li>非关系型数据库 NoSQL (Redis 、 Memcache 、 MongoDB )</li></ul><h2 id="mysql" tabindex="-1">MySQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MySQL&quot;">​</a></h2><p>是一个开源免费的 数据库 、主要应用于 中小型 企业 , 目前在一些大型企业中 也逐步采用 该数据库。</p><h2 id="mysql数据库的组成" tabindex="-1">MySQL数据库的组成 <a class="header-anchor" href="#mysql数据库的组成" aria-label="Permalink to &quot;MySQL数据库的组成&quot;">​</a></h2><blockquote><p>人们常说的 <code>数据库</code> 是一种简称 、关系型数据库的完整 名称 <code>数据库管理系统</code> ， MySQL 是由 多个 Database(数据库) 组成的 数据库管理系统</p></blockquote><ul><li>Database 数据库、是用来存储 数据的 仓库 、每一个仓库 之间 是 相互独立的 。 <ul><li>Table 表 : 用来真正存储数据的容器、一个 Database 下 可以拥有 多个 Table <ul><li>Column 字段 ： 用来定义表中 每一列数据的 名称、类型、长度 等信息</li><li>Data 数据 ：用来存储数据</li></ul></li><li>View 视图 ： 是一种 表 数据的映射信息</li><li>Index 索引： 负责 优化数据库查询效率</li><li>Procedure 存储过程</li><li>Function 函数</li><li>Trigger 触发器</li></ul></li><li>引擎</li></ul><h2 id="安装-mysql-数据库" tabindex="-1">安装 MySQL 数据库 <a class="header-anchor" href="#安装-mysql-数据库" aria-label="Permalink to &quot;安装 MySQL 数据库&quot;">​</a></h2><p><a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noreferrer">下载地址</a>: <a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noreferrer">https://downloads.mysql.com/archives/community/</a></p><ol><li>解压 mysql-8.0.20-winx64.zip 到 MySQL 文件夹 中</li><li>在 MySQL 目录 下 、新建一个 my.ini 文件 (MySQL的配置文件)</li></ol><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[mysqld]</span></span>
<span class="line"><span>basedir=D:/Program Files/MySQL</span></span>
<span class="line"><span>datadir=D:/Program Files/MySQL/data</span></span>
<span class="line"><span>port=3306</span></span></code></pre></div><ol start="3"><li>以管理员身份 打开命令提示符、并切换到 D:\\Program Files\\MySQL\\bin 目录下</li></ol><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysqld  --initialize-insecure  --user=mysql</span></span></code></pre></div><blockquote><p>上面的命令 会生成 内置数据库需要的文件、并 创建一个 默认 账户为 root , 且 密码为空的 超级用户</p></blockquote><ol start="4"><li>将 mysql 设置为 开机自启 服务</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysqld   install</span></span></code></pre></div><ol start="5"><li>将 D:\\Program Files\\MySQL\\bin 配置 到环境变量 Path 中 ， 方便再 命令提示符中 快速找到 mysql 相关命令</li><li>启动 mysql 数据库</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>net  start  mysql</span></span></code></pre></div><blockquote><p>如果 启动失败 、将 压缩包中的 vcruntime140_1.dll 拷贝到 D:\\Program Files\\MySQL\\bin 目录下</p></blockquote><h2 id="卸载-mysql" tabindex="-1">卸载 MySQL <a class="header-anchor" href="#卸载-mysql" aria-label="Permalink to &quot;卸载 MySQL&quot;">​</a></h2><ol><li>停止 mysql 数据库</li></ol><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>net  stop mysql</span></span></code></pre></div><ol start="2"><li>卸载 服务</li></ol><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysqld  remove</span></span></code></pre></div><ol start="3"><li>删除 MySQL 目录</li></ol><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><ul><li>结构化数据、例如 关系型数据库</li><li>半结构化数据 、 HTML 、 XML 、 JSON</li><li>非结构化数据</li></ul><h3 id="sql-结构化查询语言-命令" tabindex="-1">SQL（结构化查询语言）命令 <a class="header-anchor" href="#sql-结构化查询语言-命令" aria-label="Permalink to &quot;SQL（结构化查询语言）命令&quot;">​</a></h3><blockquote><p>关系型数据库擅长处理 结构化数据 、可以通过 结构化查询语言 对数据 进行 CRUD (增删改查)</p></blockquote><ul><li>DDL (数据定义语言) ： 主要包含的命令 有 create 、 drop 、 alter 、truncate 、show</li><li>DML (数据操纵语言) : 主要包含的命令有 insert , update , delete</li><li>DQL (数据查询语言) : 主要 包含的 命令是 select</li><li>DCL (数据控制语言) : 主要包含的命令是 grant 、revoke</li></ul><h3 id="数据库-database-的-操作" tabindex="-1">数据库 database 的 操作 <a class="header-anchor" href="#数据库-database-的-操作" aria-label="Permalink to &quot;数据库 database 的 操作&quot;">​</a></h3><ul><li><p>查询 当前 数据库管理系统 DBMS 下 有哪些 Database 数据库</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>show  databases  [ like  &#39;%x%&#39; ] ;</span></span></code></pre></div></li><li><p>新建一个数据库 database</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>create database [if not exists]  &lt;databaseName&gt; ;</span></span></code></pre></div></li><li><p>删除 指定的数据库</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>drop database [if exists] &lt;databaseName&gt; ;</span></span></code></pre></div></li><li><p>切换数据库</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>use &lt;databaseName&gt;</span></span></code></pre></div></li></ul><h3 id="mysql数据库支持的数据类型" tabindex="-1">MySQL数据库支持的数据类型 <a class="header-anchor" href="#mysql数据库支持的数据类型" aria-label="Permalink to &quot;MySQL数据库支持的数据类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>MySQL</th><th>Java</th><th>说明</th></tr></thead><tbody><tr><td>tinyint</td><td>byte</td><td>占用1个字节的整数</td></tr><tr><td>smallint</td><td>short</td><td>占用2个字节的整数</td></tr><tr><td>int / integer</td><td>int</td><td>占用 4个字节的整数</td></tr><tr><td>bigint</td><td>long</td><td>占用8个字节的整数</td></tr><tr><td>float / double(11, 1)</td><td>float / double</td><td>小数类型, 可以指定有效长度 和 保留小数位</td></tr><tr><td>bool / boolean</td><td>boolean</td><td>真和假</td></tr><tr><td>decimal(n, m)</td><td>BigDecimal</td><td>高精度小数， n 代表有效长度， m 代表 保留小数位数</td></tr><tr><td>char(11)</td><td>String</td><td>固定长度的字符串、</td></tr><tr><td>varchar(11)</td><td>String</td><td>可变长度的字符串，括号中限定最大长度</td></tr><tr><td>text / longtext</td><td>String</td><td>存储超大文本字符串</td></tr><tr><td>enum(&#39;a&#39;, &#39;b&#39; , &#39;c&#39;)</td><td>String</td><td>定义一个枚举 类型，通过 括号中的内容 限定值</td></tr><tr><td>date</td><td>Date / LocalDate</td><td>用来存储日期的类型，存储格式为 yyyy-MM-dd</td></tr><tr><td>datetime</td><td>Date / LocalDateTime</td><td>用来存储日期和时间的类型</td></tr><tr><td>time</td><td>LocalTime</td><td>用来存储时间的类型</td></tr><tr><td>blob / longblob</td><td>byte[]</td><td>用来存储 二进制流数据</td></tr></tbody></table><h3 id="表的基本操作" tabindex="-1">表的基本操作 <a class="header-anchor" href="#表的基本操作" aria-label="Permalink to &quot;表的基本操作&quot;">​</a></h3><ul><li><p>创建表</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>create  table [if not exists] &lt;tableName&gt; (</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;columnName&gt;  &lt;columnType&gt;  [constraints]  [comment] , </span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    &lt;columnName&gt;  &lt;columnType&gt;  [constraints]  [comment] </span></span>
<span class="line"><span>) ;</span></span></code></pre></div></li><li><p>删除表</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>drop table [if exists] &lt;tableName&gt; ;</span></span></code></pre></div></li><li><p>修改表结构 alter table</p><ul><li>添加字段</li></ul><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>alter table &lt;tableName&gt; add [column]  &lt;columnName&gt;  &lt;columnType&gt;  [constraints] [comment] ;</span></span></code></pre></div><ul><li>删除字段</li></ul><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>alter table &lt;tableName&gt;  drop [column]  &lt;columnName&gt; ;</span></span></code></pre></div><ul><li>修改字段名</li></ul><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>alter table &lt;tableName&gt; change &lt;oldName&gt;  &lt;newName&gt; &lt;columnType&gt; [constraints] [comment] ;</span></span></code></pre></div><ul><li>修改 字段类型</li></ul><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>alter table &lt;tableName&gt; modify &lt;columName&gt;  &lt;columnType&gt; [constraints] [comment] ;</span></span></code></pre></div><ul><li>修改表 名</li></ul><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>alter table &lt;tableName&gt;  rename to &lt;newTableName&gt; ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>rename table &lt;tableName&gt;  to  &lt;newTableName&gt;  ;</span></span></code></pre></div></li><li><p>查看 当前 database 下所有的表</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>show  tables ;</span></span></code></pre></div></li><li><p>查看 表结构</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>desc &lt;tableName&gt;   |  describe &lt;tableName&gt; ;</span></span></code></pre></div></li><li><p>查看 建表语句</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>show  create table &lt;tableName&gt; ;</span></span></code></pre></div></li></ul><h3 id="dml-语句" tabindex="-1">DML 语句 <a class="header-anchor" href="#dml-语句" aria-label="Permalink to &quot;DML 语句&quot;">​</a></h3><blockquote><p>对数据 进行 增、删、改 操作</p></blockquote><ul><li><p>插入 命令</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 插入值的个数 必须和 字段定义的个数相同 且 顺序 一致</span></span>
<span class="line"><span>insert into &lt;tableName&gt;  values (val ...) ;     /* 不推荐使用 */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>insert into &lt;tableName&gt;(col1 , col2 , ...) values(val1,  val2 , ...) ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 批量插入 </span></span>
<span class="line"><span>insert into &lt;tableName&gt;(col1, col2, ...) values (val1, val2 , ...) , (val1, val2, ...) ... ;</span></span></code></pre></div></li><li><p>修改 命令</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>update &lt;tableName&gt; set &lt;columnName&gt; = val , ...  [where &lt;condition&gt;] ;</span></span></code></pre></div><blockquote><p>在 使用 更新命令的时候，如果 不带 where 条件，那么会 全表更新， 所以往往 更新 语句 都会添加 where 条件 。</p></blockquote></li><li><p>删除命令</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>delete  from &lt;tableName&gt;  [where &lt;condition&gt; ] ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>truncate table &lt;tableName&gt; ;  -- 截断表，删除表中所有的数据和占用的空间， 该命令是属于 DDL 命令</span></span></code></pre></div></li></ul><blockquote><p>在使用 删除 命令的时候， 如果不带 where 条件， 那么 会删除 表中所有的数据 、往往 删除语句 都会添加 where 条件 。</p><p>如果 要删除 表中所有的数据 ，推荐使用 <code>truncate table &lt;tableName&gt;</code> 命令</p></blockquote><br><h5 id="delete-和-truncate-的区别" tabindex="-1">delete 和 truncate 的区别 <a class="header-anchor" href="#delete-和-truncate-的区别" aria-label="Permalink to &quot;delete 和 truncate 的区别&quot;">​</a></h5><ol><li>delete 可以 按照 条件 删除 、 truncate 不能 删除 指定的数据</li><li>delete 删除 表中所有的数据时 只删除 删除，而不删除 数据所占用的空间 ， truncate 是 删除数据和 占用的空间</li><li>delete 属于 DML 语句 ，在 操作的时候，可以 在 事务环境中 执行 。 而 truncate 不会 进行 事务 管理</li></ol><h4 id="where-条件-查询" tabindex="-1">where 条件 查询 <a class="header-anchor" href="#where-条件-查询" aria-label="Permalink to &quot;where 条件 查询&quot;">​</a></h4><ol><li>关系 条件查询</li></ol><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt; ,   &gt;=  ,   &lt; ,   &lt;=  ,   =  (等于) ,   &lt;&gt; (不等于) ,  !=  (不等于)</span></span></code></pre></div><ol start="2"><li>逻辑条件查询</li></ol><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>and (与) ,  or (或)</span></span></code></pre></div><ol start="3"><li>模糊条件查询</li></ol><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>关键字 like  </span></span>
<span class="line"><span>模糊查询的 符号 有 </span></span>
<span class="line"><span> %  :  匹配 0 ~ N 个字符 </span></span>
<span class="line"><span> _  :  匹配 1个 字符 </span></span>
<span class="line"><span> </span></span>
<span class="line"><span> </span></span>
<span class="line"><span>select * from user where name like &#39;%三%&#39; ;</span></span></code></pre></div><ol start="4"><li>区间条件查询</li></ol><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>between ... and </span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询 成绩 在 70  ~ 80 之间的 所有 学生信息 </span></span>
<span class="line"><span>select * from student where score between 70 and 80 ;</span></span></code></pre></div><ol start="5"><li>枚举条件查询 in</li></ol><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询 名字 为 张三 、 李四 、 王五 的学生信息 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>select * from student where name in (&#39;张三&#39;, &#39;李四&#39; , &#39;王五&#39;)</span></span></code></pre></div><ol start="6"><li>空值条件查询</li></ol><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询 性别 为 空的 学生信息 </span></span>
<span class="line"><span>select * from student where gender is null ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 查询 性别 不为空的学生信息 </span></span>
<span class="line"><span>select * from student where gender is not null ;</span></span></code></pre></div><br><h3 id="数据库约束类型" tabindex="-1">数据库约束类型 <a class="header-anchor" href="#数据库约束类型" aria-label="Permalink to &quot;数据库约束类型&quot;">​</a></h3><ul><li>主键约束 primary key ： 在 整个表中， 唯一且非空 ！ 一张表 最多只能设计 一个主键约束</li><li>唯一约束 unique : 值不允许重复、但可以为空</li><li>非空约束 not null : 限定值 不允许为 空 ， 默认 字段 采用 允许 为 null</li><li>默认约束 default : 设置 默认值 ， 如果在插入的时候，没有插入该值，则取默认值</li><li>检查约束 check : MySQL 暂不支持该约束</li><li>外键约束 foreign key : 用来描述 数据与数据 、 表与表 之间的 关系</li></ul><blockquote><p>一张表 中 不是 约束定义的越多越好 ，因为 约束 会增加数据库的 负担、应该给一些 关键的 字段 添加合适的约束</p></blockquote><br><h3 id="数据库的范式" tabindex="-1">数据库的范式 <a class="header-anchor" href="#数据库的范式" aria-label="Permalink to &quot;数据库的范式&quot;">​</a></h3><blockquote><p>数据库的范式要求 指的是 在 建表的时候 需要遵循的原则 和 规范 ~~~~ ， 关系型数据库有 6 大范式 ，通常 在设计的时候只需要遵循数据库三范式即可。</p><p>范式 是 为了 减少 数据库 的 数据冗余</p></blockquote><br><ul><li>第一范式： 表中 字段 不可拆分 ， 关系型数据库设计的表 全部 遵循 一范式</li><li>第二范式： 表中 必须 提供一个 主键</li><li>第三范式 ：表中的 字段 必须 和 表中的 主属性 有 直接关系，而不能是 间接关系</li></ul><br><h3 id="数据库表与表之间的关系" tabindex="-1">数据库表与表之间的关系 <a class="header-anchor" href="#数据库表与表之间的关系" aria-label="Permalink to &quot;数据库表与表之间的关系&quot;">​</a></h3><ul><li><p>一 对 一 关联关系 :</p></li><li><p>主键 + 外键 + unique</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>create table tb_user_info(</span></span>
<span class="line"><span>   id bigint primary key auto_increment , </span></span>
<span class="line"><span>     </span></span>
<span class="line"><span>     realName varchar(20) comment &#39;真实姓名&#39;, </span></span>
<span class="line"><span>     cardNo varchar(18) comment &#39;身份证号&#39; , </span></span>
<span class="line"><span>     photo varchar(100) comment &#39;用户头像&#39; ,</span></span>
<span class="line"><span>     birth date comment &#39;出生日期&#39; , </span></span>
<span class="line"><span>     </span></span>
<span class="line"><span>     user_id bigint unique comment &#39;用户ID&#39;,</span></span>
<span class="line"><span>     </span></span>
<span class="line"><span>     -- 添加一个外键约束 </span></span>
<span class="line"><span>     constraint tb_user_info_user_id_fk foreign key(user_id) references tb_user(id)</span></span>
<span class="line"><span>);</span></span></code></pre></div></li><li><p>共享主键</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>create table tb_user_info(</span></span>
<span class="line"><span>    id bigint primary key , </span></span>
<span class="line"><span>     </span></span>
<span class="line"><span>     realName varchar(20) comment &#39;真实姓名&#39;, </span></span>
<span class="line"><span>     cardNo varchar(18) comment &#39;身份证号&#39; , </span></span>
<span class="line"><span>     photo varchar(100) comment &#39;用户头像&#39; ,</span></span>
<span class="line"><span>     birth date comment &#39;出生日期&#39; , </span></span>
<span class="line"><span></span></span>
<span class="line"><span>     -- 添加一个外键约束 </span></span>
<span class="line"><span>     constraint tb_user_info_user_id_fk foreign key(id) references tb_user(id)</span></span>
<span class="line"><span>);</span></span></code></pre></div></li><li><p>一 对 多 关联关系 :</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>create table tb_address (</span></span>
<span class="line"><span>   id bigint primary key auto_increment , </span></span>
<span class="line"><span>     name varchar(50) comment &#39;收货人&#39;, </span></span>
<span class="line"><span>     pro varchar(20) comment &#39;省份&#39;,   </span></span>
<span class="line"><span>     city varchar(20) comment &#39;城市&#39;, </span></span>
<span class="line"><span>     country varchar(20) comment &#39;区县&#39;, </span></span>
<span class="line"><span>     detail varchar(50) comment &#39;详细地址&#39;, </span></span>
<span class="line"><span>     tel varchar(11) comment &#39;联系方式&#39; , </span></span>
<span class="line"><span>     user_id bigint comment &#39;用户ID&#39; , </span></span>
<span class="line"><span>     -- 添加外键约束 </span></span>
<span class="line"><span>     foreign key(user_id) references tb_user(id)</span></span>
<span class="line"><span>);</span></span></code></pre></div></li><li><p>多 对 多 关联关系 ：</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>create table tb_role(</span></span>
<span class="line"><span>   id bigint primary key auto_increment , </span></span>
<span class="line"><span>     name varchar(100) comment &#39;角色名&#39; , </span></span>
<span class="line"><span>     description text comment &#39;角色描述&#39;</span></span>
<span class="line"><span>);</span></span></code></pre></div><ul><li><p>中间表 + 2个外键 + 主键</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>create table tb_role_user(</span></span>
<span class="line"><span>   id bigint primary key auto_increment ,</span></span>
<span class="line"><span>     role_id bigint comment &#39;角色Id&#39;, </span></span>
<span class="line"><span>     user_id bigint comment &#39;用户ID&#39;, </span></span>
<span class="line"><span>     foreign key(role_id) references tb_role(id), </span></span>
<span class="line"><span>     foreign key(user_id) references tb_user(id)</span></span>
<span class="line"><span>) ;</span></span></code></pre></div></li><li><p>中间表 + 2 个外键 + 联合主键</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>create table tb_role_user(</span></span>
<span class="line"><span>     role_id bigint comment &#39;角色Id&#39;, </span></span>
<span class="line"><span>     user_id bigint comment &#39;用户ID&#39;, </span></span>
<span class="line"><span>     foreign key(role_id) references tb_role(id), </span></span>
<span class="line"><span>     foreign key(user_id) references tb_user(id), </span></span>
<span class="line"><span>     -- 联合主键</span></span>
<span class="line"><span>     primary key(role_id, user_id) </span></span>
<span class="line"><span>) ;</span></span></code></pre></div></li></ul></li></ul><h3 id="数据与数据之间的关系" tabindex="-1">数据与数据之间的关系 <a class="header-anchor" href="#数据与数据之间的关系" aria-label="Permalink to &quot;数据与数据之间的关系&quot;">​</a></h3><blockquote><p>在 一张表中， 数据之间 也可能会 存在 一对多 的关联关系</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>create table tb_employee(</span></span>
<span class="line"><span> id bigint primary key auto_increment , </span></span>
<span class="line"><span> name varchar(50) comment &#39;员工名称&#39;, </span></span>
<span class="line"><span> job  varchar(20) comment &#39;职务&#39; ,</span></span>
<span class="line"><span>pid bigint comment &#39;上级ID&#39; , </span></span>
<span class="line"><span> foreign key(pid) references tb_employee(id) </span></span>
<span class="line"><span>);</span></span></code></pre></div></blockquote><h2 id="查询命令" tabindex="-1">查询命令 <a class="header-anchor" href="#查询命令" aria-label="Permalink to &quot;查询命令&quot;">​</a></h2><ul><li><p>简单查询</p><ul><li><p>select 简单查询</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select  1 ;  -- 往往用来做数据库心跳检测</span></span>
<span class="line"><span></span></span>
<span class="line"><span>select user() ;  -- 获取当前登录的用户信息</span></span>
<span class="line"><span></span></span>
<span class="line"><span>select version() ;  -- 获取数据库的版本号</span></span>
<span class="line"><span></span></span>
<span class="line"><span>select now() ;  -- 获取 当前系统时间 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>select last_insert_id() ;  -- 获取最后插入的主键(必须是自增)</span></span></code></pre></div></li><li><p>基于表查询</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select  &lt;columnName&gt; , ....  from  &lt;tableName&gt; ; </span></span>
<span class="line"><span></span></span>
<span class="line"><span>select * from &lt;tableName&gt;  ;  -- 查询 表中所有的字段 ， 在生产环境中 不推荐使用 * 查询所有字段</span></span></code></pre></div></li><li><p>基于条件的查询</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select  &lt;columnName&gt; , ... from &lt;tableName&gt;  where &lt;condition&gt; ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>select * from tb_user where name = &#39;admin&#39;  ;  --  查询的时候 name的值 不区分大小写 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>select * from tb_user where binary name = &#39;admin&#39; ;  -- 查询的 name 值 区分大小写</span></span></code></pre></div></li><li><p>基于分组的查询</p><ul><li><p>count() : 用来 统计 个数</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>--  查询 学生表中 有多少个 学生 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>select count(*)  from  student ;  -- 以行为单位 ，统计有多少个学生</span></span>
<span class="line"><span></span></span>
<span class="line"><span>select count(stuNo) from student ; -- 根据学号 来统计 有多少个学生</span></span>
<span class="line"><span></span></span>
<span class="line"><span>select count(1) from student ;  -- 根据常量值 进行统计、如果有值，个数 + 1</span></span></code></pre></div><blockquote><p>从性能上 、 count(1 ) &gt; count( * ）， count(column) 只统计该列中 值不为 &gt; null 的 行数(null不参与统计) 。</p><p>如果 count(column) 中的 column 中的列 有索引，那么性能 会 比 count(1) 高 、 如果 &gt; 没有索引，性能 比 count(*) 还低</p></blockquote></li><li><p>sum() : 求和</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询学生的总成绩 </span></span>
<span class="line"><span>select sum(score) from student ;  -- sum 函数 参数 只能传入 字段名，  字段列中对应的 null 不参与 求和</span></span></code></pre></div></li><li><p>avg() : 求平均值</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询学生 的平均成绩 </span></span>
<span class="line"><span>select avg(score) from student ;  -- sum 函数 参数 只能传入 字段名，  字段列中对应的 null 不参与 求平均值</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>select  avg ( ifnull(score,  0) ) from student ;  -- 字段列对应的 null, 则 取 0 ， 仍旧参与 求 平均值</span></span></code></pre></div></li><li><p>max() : 求最大值</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询 最高分 </span></span>
<span class="line"><span>select  max(score) from student ;</span></span></code></pre></div></li><li><p>min() : 求最小值</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询 最低分 </span></span>
<span class="line"><span>select min(score) from student ;  -- 空值不参与 求 最小值</span></span></code></pre></div></li></ul></li><li><p>group by 实现 分组查询</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询 不同 性别的 学生人数 </span></span>
<span class="line"><span>select  sex,  count(1) from student group by sex ;</span></span></code></pre></div></li></ul><blockquote><p>group by 分组 对查询的 列 有 要求 ， 要么 查询的 列 是一个 聚合 列 、要么 出现 在 group by 的 后面，作为分组依据。</p><ul><li>having 分组 筛选<br> 对分组后的结果 进行过滤 、筛选， having 是 基于 group by 存在 的。</li></ul><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询 班级中 同名 、同性别 的 学生名 和 性别</span></span>
<span class="line"><span>select name, gender from student group by name ,gender having count(1) &gt; 1 ;</span></span></code></pre></div></blockquote><p>where 和 having 的区别</p><pre><code>1. where  是 对 表中的 数据 进行筛选 ，  having  是 对 分组后的 结果 进行 筛选 。
2. where  和  having  如果 同时 存在 ，那么  where 先筛选  再分组  再过滤
3. where 条件 中 不能使用 聚合函数 、但 having 可以使用 聚合函数 
4. 能用 where 筛选过滤的数据 、尽量不要用 having  筛选
</code></pre><ul><li><p>数据排序 order by</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询 所有的学生信息 、按照 成绩降序排列，当成绩相同的时候 ，按照 出生日期 降序排列 </span></span>
<span class="line"><span>select * from student order by score desc , birth desc  ;</span></span></code></pre></div><blockquote><p>当 有多个字段 参与排序的时候， 优先根据 第一个排序的字段 进行排序，当 第一个字段 的值 相同的时候，才会根据第二个字段的值进行排序、依此类推。</p></blockquote></li><li><p>分页查询 limit</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select * from student  limit 3 ;  -- 查询表中 前 3 条数据 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>select * from  student  limit  10 ,  3  ;  -- 查询表中 从 第 11条数据开始 3 条数据 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>select * from  student limit 10 offset 3 ;</span></span></code></pre></div><blockquote><p>分页查询的时候， 如果 包含 order by , 那么 建议根据 唯一键 进行排序 、如果 根据 的字段值有大量的重复、建议 使用 多个字段排序 ， 否则 会出现 分页数据紊乱 。</p></blockquote></li></ul></li><li><p>子查询</p><ul><li><p>基于 列 的 子查询 (当查询的列需要一个单独的SQL进行查询的时候)</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select u.username , u.password, u.tel , </span></span>
<span class="line"><span>        (select f.realName from tb_user_info as f where f.id = u.id) as realName </span></span>
<span class="line"><span>from tb_user as u where u.id = 12 ;</span></span></code></pre></div><blockquote><p>子查询必须添加 小括号 ， 基于列的 子查询 查询的 结果 必须 满足 单列 单值</p></blockquote></li><li><p>基于 表的 子查询 (嵌套查询)</p><blockquote><p>将一个查询的结果 作为一张表 、继续 进行查询 。查询的结果 需要设置一个别名，作为 临时表的 名称 ！</p></blockquote></li><li><p>基于 条件的 子查询</p><ul><li><p>等值 条件子查询 （子查询 返回 单列 单值）</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询 班级 中 成绩 最高的 学生 信息 </span></span>
<span class="line"><span>select * from student where score = (select max(score) from student);</span></span></code></pre></div></li><li><p>关系条件子查询 （子查询 返回 单列 单值、如果子查询返回单列多值、可以使用 any , all 来处理 ）</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select * from student where score &gt; (select max(score) from student);</span></span></code></pre></div></li><li><p>in 子查询 (子查询 返回 单列 多值)</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询 同名的学生信息 </span></span>
<span class="line"><span>select * from student where name in (</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    select name  from student group by name having count(1) &gt; 1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>)</span></span></code></pre></div></li><li><p>exists 子查询</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询 学生中 同名, 同性别 学生信息 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>select * from student t where exists (</span></span>
<span class="line"><span>    select 1 from student f </span></span>
<span class="line"><span>        where t.name = f.name and t.gender = f.gender</span></span>
<span class="line"><span>    group by f.name, gender having count(1) &gt; 1</span></span>
<span class="line"><span>);</span></span></code></pre></div></li></ul></li></ul></li><li><p>关联关系查询</p><blockquote><p>关联关系 查询 主要 解决的是 表与表之间的 关联关系</p><ul><li>左外连接 left [outer] join .... on</li><li>右外连接 right [outer] join .... on</li><li>内连接 [inner] join .... on</li></ul><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select u.*,  d.id as aid , d.name ,d.pro, d.city, d.country, d.detail , d.tel as atel ,  r.name as roleName</span></span>
<span class="line"><span> from tb_user u inner join tb_address d on u.id = d.user_id </span></span>
<span class="line"><span> left join tb_role_user ur on ur.user_id = u.id </span></span>
<span class="line"><span> left join tb_role r on r.id = ur.role_id</span></span></code></pre></div></blockquote><p>where u.username = &#39;admin&#39; ;</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div></li><li><p>集合查询</p><blockquote><p>集合 查询 指的是 将 2个 或者 多个 查询 的结果 合并为 一个结果</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select  gender ,count(1) as y from java2302.student where gender = &#39;m&#39; </span></span>
<span class="line"><span>union all</span></span>
<span class="line"><span>select gender , count(1) as y from java2302.student where gender = &#39;f&#39;</span></span></code></pre></div><ul><li>union all : 并集不去重</li><li>union : 并集去重</li></ul></blockquote><p><strong>两个或多个查询 、查询的个数必须一致、合并的列含义应该相同</strong></p></li><li><p>with查询</p><blockquote><p>with 用来 定义 临时表 、借助 临时表 可以完成 复杂的 SQL语句编写 。</p></blockquote><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>with temp as (</span></span>
<span class="line"><span>    select t.*, c.class_name from tb_student t </span></span>
<span class="line"><span>  left join tb_class c on t.class_id = c.id </span></span>
<span class="line"><span>),</span></span>
<span class="line"><span>temp2 as (</span></span>
<span class="line"><span>    select t.*, s.name as subject_name, s.id as subject_id from tb_teacher t </span></span>
<span class="line"><span>    left join tb_subject s on t.id = s.teacher_id  </span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>select distinct t.* from temp t </span></span>
<span class="line"><span>left join tb_score s on t.id = s.stu_id </span></span>
<span class="line"><span>left join temp2 as k on k.subject_id = s.subject_id </span></span>
<span class="line"><span>where t.name = &#39;AAA&#39; ;</span></span></code></pre></div></li><li><p>with recursive 递归查询</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询 部门名为 奇酷网络科技有限公司 及其 它下的 所有子部门</span></span>
<span class="line"><span>with recursive depart as (</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>     select * from tb_depart where pid is null and depart_name = &#39;奇酷网络科技有限公司&#39;</span></span>
<span class="line"><span>     </span></span>
<span class="line"><span>     union  </span></span>
<span class="line"><span>     </span></span>
<span class="line"><span>     select  d.*  from tb_depart d </span></span>
<span class="line"><span>            inner join depart p on d.pid = p.id </span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>select * from depart</span></span></code></pre></div></li></ul><br><h3 id="常见的函数" tabindex="-1">常见的函数 <a class="header-anchor" href="#常见的函数" aria-label="Permalink to &quot;常见的函数&quot;">​</a></h3><ul><li><p>日期函数</p><ul><li>now() : 当前系统时间</li></ul><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select  now();</span></span></code></pre></div><ul><li>date_add() : 添加 时间</li></ul><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select date_add(now(),  interval 18 year) ;</span></span></code></pre></div><ul><li>date_sub() : 减少时间</li></ul><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select date_sub(now(),  interval 18 month) ;</span></span></code></pre></div><ul><li>datediff() : 计算两个日期间隔、返回天数</li></ul><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select datediff(now() ,  birth)  from student ;</span></span></code></pre></div><ul><li>date_format() : 格式化日期</li></ul><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select  date_format(now(),  &#39;%Y-%m-%d %H:%i:%s&#39;) ;</span></span></code></pre></div><ul><li>year() : 获取 年份</li><li>month() : 获取月份</li></ul></li><li><p>数学函数</p><ul><li>abs(n) : 绝对值</li><li>ceil(n) : 向上取整</li><li>floor(n) : 向下取整</li><li>round(n, x) : 四舍五入保留 x 位小数</li><li>pow(x, y) : 获取 x 的 y次幂</li></ul></li><li><p>字符串函数</p><ul><li>concat(a, b , ...) : 将 多个字符串 拼接起来</li><li>concat_ws(sep, a, b, ...) ： 将多个字符串 以 指定的分隔符 sep 进行 拼接</li><li>group_concat( [distinct] columName [order by columnName asc|desc ] [separetor sep] ) : 将 多行内容 以指定的分隔符进行拼接，默认使用 逗号 进行 拼接</li><li>substring(str, pos , len) : 从 指定的字符串 pos 位置 开始 截取 指定的长度 ， pos 从 1 开始</li><li>replace（str , oldstr, newstr） : 将 指定的 字符串str 中 的 oldstr 替换为 newstr</li><li>upper / ucase : 将字符串转换为 全大写</li><li>lower / lcase : 将字符串转换为 全小写</li><li>trim / ltrim / rtrim : 去除 (左/右) 空格</li><li>length : 获取 字符串的 字节长度、 一个中文 在 UTF-8编码下 占用 3个 字节</li><li>char_length ： 获取 字符串的 长度</li><li>instr(str, sub) : 获取 sub 在 str 字符串中第一次 出现的位置，从 1开始</li><li>left / right (str, len) : 从 左边 /右边 截取 指定长度 的 字符串</li><li>lpad / rpad (str, len , word) : 将 字符串 str 左补/右补 len 长度 ， 使用 word 单词 进行填充， 如果 指定的长度 小于 原始内容长度，则繁盛 从左 截取 指定的 len 个长度</li></ul></li><li><p>判断函数</p><ul><li><p>ifnull(x , val) : 如果 x 的值 为 null , 则 取 val , 给 x 设置 默认值</p></li><li><p>if (bool , x, y ) : 如果 bool 返回 真 ，则 取 x 否则 取 y , （等价于 三元运算符 ）</p></li><li><p>case when ...</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select score,  </span></span>
<span class="line"><span>    case </span></span>
<span class="line"><span>        when score &gt;= 90 then &#39;优秀&#39; </span></span>
<span class="line"><span>        when score &gt;= 80 then &#39;良好&#39;</span></span>
<span class="line"><span>        when score &gt;= 70 then &#39;中等&#39;</span></span>
<span class="line"><span>        when score &gt;= 60 then &#39;及格&#39;</span></span>
<span class="line"><span>        else &#39;不及格&#39;</span></span>
<span class="line"><span>    end as level </span></span>
<span class="line"><span>    </span></span>
<span class="line"><span> from student ;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span> </span></span>
<span class="line"><span>select score,  </span></span>
<span class="line"><span>    case floor(score / 10)</span></span>
<span class="line"><span>        when 9 then &#39;优秀&#39; </span></span>
<span class="line"><span>        when 8 then &#39;良好&#39;</span></span>
<span class="line"><span>        when 7 then &#39;中等&#39;</span></span>
<span class="line"><span>        when 6 then &#39;及格&#39;</span></span>
<span class="line"><span>        else &#39;不及格&#39;</span></span>
<span class="line"><span>    end as level </span></span>
<span class="line"><span> from student ;</span></span></code></pre></div></li></ul></li><li><p>加密函数</p><ul><li><p>md5 : 采用 hash 混淆算法，该算法是不可逆的 (只能加密不能解密) 、网站中的密码通常会采用 MD5加密</p><blockquote><p>MD5 密文 是 由 16进制 组成的 32位长度的 字符串 、相同的字符串 加密后结果 一定相同 ~</p><p>MD5 可以通过 彩虹对照表 的手段 进行 简单密码的 暴力 解密</p></blockquote></li></ul></li></ul><h2 id="视图-view" tabindex="-1">视图 View <a class="header-anchor" href="#视图-view" aria-label="Permalink to &quot;视图  View&quot;">​</a></h2><p>视图 是 表的映射 、是一张 虚表 、它本质上 是 一个 SQL 查询命令 ， 他的主要作用 有2个， a) 简化查询 、 b) 能够在一定程度上保证数据的安全。</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>create view v_student as </span></span>
<span class="line"><span>    select s.*,  c.class_name from tb_student s left join tb_class c </span></span>
<span class="line"><span>    on s.class_id = c.id ;</span></span></code></pre></div><h2 id="索引-index" tabindex="-1">索引 index <a class="header-anchor" href="#索引-index" aria-label="Permalink to &quot;索引  index&quot;">​</a></h2><blockquote><p>是为了提供 查询的效率</p></blockquote><h3 id="索引的结构" tabindex="-1">索引的结构 <a class="header-anchor" href="#索引的结构" aria-label="Permalink to &quot;索引的结构&quot;">​</a></h3><ul><li>B-tree索引 ： 适用于单列或多列的查找、排序和范围查询 。MySQL默认使用的索引类型</li><li>哈希索引 : 适用于等值查询，将值存储在哈希表中，可以快速定位特定的数据行。但哈希索引不支持排序、范围查询或部分匹配查询。</li></ul><h3 id="创建索引" tabindex="-1">创建索引 <a class="header-anchor" href="#创建索引" aria-label="Permalink to &quot;创建索引&quot;">​</a></h3><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>create [unique]  index  索引名  on &lt;tableName&gt;(column...) [using hash] ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 创建一个 普通索引  </span></span>
<span class="line"><span>create index  tb_user_birth_index on tb_user(birth) ; </span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 创建一个 唯一索引 </span></span>
<span class="line"><span>create unique index tb_user_username_index  on tb_user(username) ; </span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 创建一个 组合索引  </span></span>
<span class="line"><span>create index tb_user_username_birth_index on tb_user(username,  birth) ; </span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 创建一个 哈希 索引 </span></span>
<span class="line"><span>create index tb_user_sex_index_hash on tb_user(sex) using hash;</span></span></code></pre></div><h3 id="删除索引" tabindex="-1">删除索引 <a class="header-anchor" href="#删除索引" aria-label="Permalink to &quot;删除索引&quot;">​</a></h3><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>drop  index  索引名 ;</span></span></code></pre></div><h3 id="什么字段适合添加索引" tabindex="-1">什么字段适合添加索引 <a class="header-anchor" href="#什么字段适合添加索引" aria-label="Permalink to &quot;什么字段适合添加索引&quot;">​</a></h3><ol><li>主键、 唯一键、外键 （如果添加了对应的约束、那么该字段默认已添加 索引）</li><li>该 字段 对应的 值 重复率 不高</li><li>经常出现在 where 条件上的 字段 适合 添加 索引</li><li>需要 排序的 字段 可以 添加 索引</li></ol><br><h3 id="索引失效的情况" tabindex="-1">索引失效的情况 <a class="header-anchor" href="#索引失效的情况" aria-label="Permalink to &quot;索引失效的情况&quot;">​</a></h3><ol><li><p><code>&gt;=</code> , <code>!=</code></p></li><li><p>前模糊</p></li><li><p>is not null</p></li><li><p>字段 类型不一致 发生 隐式转换</p></li><li><p>字段上使用 函数</p></li><li><p>组合 索引 采用 最左原则 ， 如果不满足该原则， 索引也会失效</p></li></ol><p>分析 SQL 性能： explain</p><p><strong>索引类型优到劣： 从system到const到eq_ref到ref到range到index到all。 查询的type类型越好，查询速度越快。</strong></p><br><h3 id="btree-和-b-tree的区别" tabindex="-1">btree 和 b+tree的区别 <a class="header-anchor" href="#btree-和-b-tree的区别" aria-label="Permalink to &quot;btree 和 b+tree的区别&quot;">​</a></h3><p>1、btree的关键字和记录是放在一起的，叶子节点可以看作外部节点，不包含任何信息；b+tree的非叶子节点中只有关键字和指向下一个节点的索引，记录只放在叶子节点中。</p><p>2、在btree中，越靠近根节点的记录查找时间越快，只要找到关键字即可确定记录的存在；而b+tree中每个记录的查找时间基本是一样的，都需要从根节点走到叶子节点，而且在叶子节点中还要再比较关键字。</p><h2 id="事务-transcation" tabindex="-1">事务 transcation <a class="header-anchor" href="#事务-transcation" aria-label="Permalink to &quot;事务 transcation&quot;">​</a></h2><h3 id="什么事务" tabindex="-1">什么事务 <a class="header-anchor" href="#什么事务" aria-label="Permalink to &quot;什么事务&quot;">​</a></h3><p>事务是为了保证一个<code>业务操作</code>的完成性， 一个业务操作 要么 全部成功 、要么 全部失败 、不允许部分成功、部分失败。</p><h3 id="事务的四大特性-acid" tabindex="-1">事务的四大特性 ACID <a class="header-anchor" href="#事务的四大特性-acid" aria-label="Permalink to &quot;事务的四大特性 ACID&quot;">​</a></h3><ul><li>A 原子性 ： 保证业务 是一个 不可再分的 基本操作</li><li>C 一致性 : 事务的最终目的 就是 为了 保证 数据库 中 数据的一致性 ，即 事务前后 数据是 一致的 ~</li><li>I 隔离性 : 数据库在 事务环境 中 会给 每一个业务 开辟一个 缓存区 、缓存区 与 缓存区 的 隔离 机制 就是 数据库的 隔离性</li><li>D 持久性 ： 保存 存储在数据库中的数据 具备 持久化(永久性存储) 功能</li></ul><h3 id="事务的隔离级别" tabindex="-1">事务的隔离级别 <a class="header-anchor" href="#事务的隔离级别" aria-label="Permalink to &quot;事务的隔离级别&quot;">​</a></h3><ul><li>uncommited read 读未提交 ： 可以 读取 另一个 事务 未提交的数据</li><li>commited read 读已提交 （Oracle 数据库的默认隔离级别）:</li><li>repeatable read 可重复读 (MySQL 数据库默认隔离级别) : 通过 锁行 解决 不可重复读 问题</li><li>serializable read 序列化读 : 通过 锁表 解决 不可重复读的问题</li></ul><h3 id="隔离级别产生的问题" tabindex="-1">隔离级别产生的问题 <a class="header-anchor" href="#隔离级别产生的问题" aria-label="Permalink to &quot;隔离级别产生的问题&quot;">​</a></h3><ul><li>脏读 ： 读取 另一个 事务 未提交的数据 ，这种现象 被称为 脏读 （脏读是 一种非常严重的问题，通常数据库不允许出现脏读现象）</li><li>不可重复度 ： 在一个 事务 二次 读取 同一条记录的时候， 另一个事务 对该条记录 进行了修改， 导致 2次 读取的 结果不一致</li><li>幻读 : 在一个 事务 二次 读取 总数量的数量， 另一个事务 在 期间 新增了 一条 记录 、导致 2次 读取 的数量不一致</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">隔离级别/问题</th><th>读未提交</th><th>读已提交</th><th>可重复读</th><th>序列化读</th></tr></thead><tbody><tr><td style="text-align:left;">脏读</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td style="text-align:left;">不可重复读</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td style="text-align:left;">幻读</td><td>√</td><td>√</td><td>√</td><td>×</td></tr></tbody></table><h2 id="mysql-数据库-账户" tabindex="-1">MySQL 数据库 账户 <a class="header-anchor" href="#mysql-数据库-账户" aria-label="Permalink to &quot;MySQL 数据库 账户&quot;">​</a></h2><blockquote><p>MySQL数据库 超级管理员是 root 账户 ， MySQL数据库下的 所有用户信息 都在 mysql 数据库下的 user 表中存储</p></blockquote><h3 id="user-表-中-重要的-字段" tabindex="-1">User 表 中 重要的 字段 <a class="header-anchor" href="#user-表-中-重要的-字段" aria-label="Permalink to &quot;User 表 中 重要的 字段&quot;">​</a></h3><ul><li>host : 存储 允许 连接数据库 的 IP 地址 ， localhost 代表 该账户 只能在 本机连接 、如果 希望 能够 远程 连接数据库， 则 需要将 该值 设置 为 <code>%</code></li><li>user : 存储 登录 的 账号</li><li>***_priv : 当前用户 所拥有的操作权限</li><li>max_connections : 当前用户允许的最大连接数、如果 为 0 ，代表没有限制</li><li>plugin ： 密码采用的加密机制 ，mysql8.x 的默认值是 caching_sha2_password ， mysql 5.x 默认是 mysql_native_password</li><li>authentication_string : 当前账户的密码， 存储的是 密文， 如果没有密码，则设置为 空字符串</li><li>password_expired : 密码是否 已经过期</li><li>password_lifetime : 密码的 存活时间</li><li>account_locked : 账号是否已禁用</li></ul><h3 id="mysql-数据库用户" tabindex="-1">MySQL 数据库用户 <a class="header-anchor" href="#mysql-数据库用户" aria-label="Permalink to &quot;MySQL 数据库用户&quot;">​</a></h3><ul><li><p>创建用户</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>create  user &lt;userName&gt;[@host]  identified by &#39;密码&#39; ; -- 当没有使用 @host,  默认 host 为  %</span></span></code></pre></div></li><li><p>删除用户</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>drop  user  &lt;userName&gt;[@host] ;</span></span></code></pre></div></li><li><p>修改 密码</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>alter user &lt;username&gt;[@host] identified by &#39;password&#39; ;</span></span></code></pre></div></li><li><p>锁定账号 / 解锁 账号</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>alter user &lt;username&gt;[@host] account lock /  unlock ;</span></span></code></pre></div></li></ul><br><h2 id="dcl" tabindex="-1">DCL <a class="header-anchor" href="#dcl" aria-label="Permalink to &quot;DCL&quot;">​</a></h2><blockquote><p>数据控制语言，用来 给用户 赋予 操作 权限 的命令</p></blockquote><h3 id="授权" tabindex="-1">授权 <a class="header-anchor" href="#授权" aria-label="Permalink to &quot;授权&quot;">​</a></h3><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>grant  &lt;权限列表&gt;  on  &lt;databaseName&gt;.&lt;tableName&gt;  to &lt;userName&gt;[@host] ;</span></span></code></pre></div><blockquote><p>权限列表 例如 select , update, delete, insert , create , drop .... , 如果要授予 所有权限， 可以使用 all 替代 。</p><p>databaseName 和 tableName 可以 使用 * 表示所有。</p><p>多个权限列表使用 逗号分隔 。</p></blockquote><h3 id="取消授权" tabindex="-1">取消授权 <a class="header-anchor" href="#取消授权" aria-label="Permalink to &quot;取消授权&quot;">​</a></h3><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>revoke &lt;权限列表&gt;  on &lt;databaseName&gt;.&lt;tableName&gt;  from &lt;userName&gt;[@host] ;</span></span></code></pre></div><h3 id="刷新权限" tabindex="-1">刷新权限 <a class="header-anchor" href="#刷新权限" aria-label="Permalink to &quot;刷新权限&quot;">​</a></h3><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>flush privileges ;</span></span></code></pre></div><p>**如果给所有的数据库授予所有的权限，例如 grant all on <code>*.*</code> to test@&#39;%&#39; , 那么 root账号无法直接撤销授予的权限，需要 给root设置 system_user权限才可以。 grant system_user on <code>*.*</code> to root@&#39;%&#39; **</p><h2 id="mysql数据库引擎" tabindex="-1">MySQL数据库引擎 <a class="header-anchor" href="#mysql数据库引擎" aria-label="Permalink to &quot;MySQL数据库引擎&quot;">​</a></h2><ul><li>InnoDB （MySQL5.7 以后的默认引擎）： a) 支持 事务管理 、 b) 支持 行级锁 、 c) 支持 外键约束</li><li>MyISAM : 性能相对较高 、但不支持 事务、行级锁、外键</li><li>MEMORY ： 采用 hash 算法 存储在 内存的 临时表</li></ul><h2 id="备份数据库" tabindex="-1">备份数据库 <a class="header-anchor" href="#备份数据库" aria-label="Permalink to &quot;备份数据库&quot;">​</a></h2><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysqldump  -u &lt;username&gt;  -p  &lt;databaseName&gt;  [&lt;tableName&gt; ...]  &gt;  a.sql</span></span></code></pre></div><br><h2 id="如何找回-root-账户密码" tabindex="-1">如何找回 root 账户密码 <a class="header-anchor" href="#如何找回-root-账户密码" aria-label="Permalink to &quot;如何找回 root 账户密码&quot;">​</a></h2><ol><li><p>关闭 mysql 服务器</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>net stop mysql</span></span></code></pre></div></li><li><p>跳过 mysql 的 权限 检查 、启动 mysql 数据库</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysqld  --skip-grant-tables  --console  --shared-memory</span></span></code></pre></div></li><li><p>使用 无密码 方式 登录 到数据库中</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql  -uroot  -p</span></span></code></pre></div></li><li><p>编写 修改 命令，将 内置 root 账户 密码设置为 &quot;&quot; 空字符串</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>update mysql.user set authentication_string = &#39;&#39;  where user = &#39;root&#39; ;</span></span></code></pre></div></li><li><p>刷新 权限</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>flush  privileges ;</span></span></code></pre></div></li><li><p>关闭 第二步 mysqld 开启的 服务 CTRL + C , 通过 CTRL + SHIFT + ESC 打开任务管理器 ，结束 mysqld 进程</p></li><li><p>正常启动 mysql 数据库</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>net  start mysql</span></span></code></pre></div></li><li><p>使用 无密码 方式 登录 到数据库中 (已经将密码重置为 空字符串)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql  -uroot  -p</span></span></code></pre></div></li><li><p>链接数据库成功后， 修改 root 密码</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>alter user  root@&#39;localhost&#39; identified by &#39;新密码&#39; ;</span></span></code></pre></div></li></ol>`,132),p=[t];function i(o,c,d,r,h,u){return e(),a("div",null,p)}const g=s(l,[["render",i]]);export{m as __pageData,g as default};
