import{_ as n,c as k,o as c,a3 as d}from"./chunks/framework.C_bjHMch.js";const r="/DocumentSite/assets/image-20210813153403664.BlXcP0iZ.png",i="/DocumentSite/assets/image-20210813155746112.Bj4WSEVI.png",s="/DocumentSite/assets/image-20210813154309057.PK4qJFPj.png",a="/DocumentSite/assets/image-20210813154448889.G3IUjIPf.png",t="/DocumentSite/assets/image-20210813154839981.0g-IdbG1.png",e="/DocumentSite/assets/image-20210813154928064.Bm8wrYfS.png",l="/DocumentSite/assets/image-20210813155049169.CIF4UcEx.png",h="/DocumentSite/assets/image-20210813155614570.CyC57v3i.png",o="/DocumentSite/assets/image-20210813155339300.CKKKR2nL.png",g="/DocumentSite/assets/image-20210621172453710.B_Xd4r5-.png",u="/DocumentSite/assets/image-20210621171934972.BczAihi8.png",F="/DocumentSite/assets/image-20210705115521085.lpElcj1m.png",b="/DocumentSite/assets/%E5%88%97%E5%87%BA%E4%BB%93%E5%BA%93%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E5%87%A0%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%85%B6%E6%96%87%E4%BB%B6%E5%90%8D.CiPjmGFU.png",m="/DocumentSite/assets/image-20210508171916951.BqSZavrf.png",y="/DocumentSite/assets/%E5%88%A0%E9%99%A4%E6%88%AA%E5%9B%BE.BaOI_969.png",C="/DocumentSite/assets/image-20210510183253770.C__s8Sqa.png",q="/DocumentSite/assets/%E5%BC%BA%E5%88%B6%E6%8F%90%E4%BA%A4.Cnw1oIYX.jpg",p="/DocumentSite/assets/image-20210510180757993.bqDjNf2o.png",E="/DocumentSite/assets/%E5%88%A0%E9%99%A4%E5%A4%A7%E6%96%87%E4%BB%B6%E5%89%8D%E5%A4%A7%E5%B0%8F.Da-b-45K.png",B="/DocumentSite/assets/%E5%88%A0%E9%99%A4%E5%A4%A7%E6%96%87%E4%BB%B6%E5%90%8E%E5%A4%A7%E5%B0%8F.BF4LmRK0.png",v="/DocumentSite/assets/image-20210508182039450.DJRRuYBv.png",_="/DocumentSite/assets/image-20210510171915185.cjdFlV6Y.png",f="/DocumentSite/assets/image-20210510172159472.CivAXa9q.png",x="/DocumentSite/assets/image-20210510180415796.C-QmCs81.png",A="/DocumentSite/assets/image-20210510180539437.Db3Hn71l.png",D="/DocumentSite/assets/image-20210510181407805.CK_lSoIz.png",P="/DocumentSite/assets/image-20210510181329197.BRS668j9.png",G="/DocumentSite/assets/image-20210701180547401.5pq878uS.png",S="/DocumentSite/assets/Git%E5%88%87%E6%8D%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.C5GZNbJ6.png",H="/DocumentSite/assets/image-20230202180342427.Bgix41w1.png",w="/DocumentSite/assets/image-20230202181026096.ZdXVV1Df.png",j="/DocumentSite/assets/image-20230202181113966.CsYCg_VZ.png",I="/DocumentSite/assets/image-20230202181232404.B0xhRG_6.png",T="/DocumentSite/assets/image-20230202181351114.C1t_AvFQ.png",M="/DocumentSite/assets/image-20230202181550351.afnhJCBF.png",Z=JSON.parse('{"title":"🌈Git操作","description":"","frontmatter":{},"headers":[],"relativePath":"tools/Git/index.md","filePath":"tools/Git/index.md"}'),R={name:"tools/Git/index.md"},U=d(`<h1 id="🌈git操作" tabindex="-1">🌈Git操作 <a class="header-anchor" href="#🌈git操作" aria-label="Permalink to &quot;🌈Git操作&quot;">​</a></h1><h2 id="一、初始化" tabindex="-1">一、初始化 <a class="header-anchor" href="#一、初始化" aria-label="Permalink to &quot;一、初始化&quot;">​</a></h2><blockquote><p>该处是用来提交时当作签名使用的</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;我的用户名&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;我的邮箱&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#删除配置信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span></span></code></pre></div><h2 id="二、git工作流程与区域" tabindex="-1">二、Git工作流程与区域 <a class="header-anchor" href="#二、git工作流程与区域" aria-label="Permalink to &quot;二、Git工作流程与区域&quot;">​</a></h2><h3 id="_1、区域" tabindex="-1">1、区域 <a class="header-anchor" href="#_1、区域" aria-label="Permalink to &quot;1、区域&quot;">​</a></h3><ol><li><p>工作区</p><blockquote><p>平时写代码的文件目录</p></blockquote></li><li><p>暂存区</p><blockquote><p>git add 后提交暂存的地方</p></blockquote></li><li><p>版本库</p><blockquote><p>git commit 后给你生成版本的地方,注意push是提交到远程仓库而不是版本库,请勿混淆</p></blockquote></li></ol><h3 id="_2、工作流程" tabindex="-1">2、工作流程 <a class="header-anchor" href="#_2、工作流程" aria-label="Permalink to &quot;2、工作流程&quot;">​</a></h3><blockquote><p>每个项目都有一个Git目录(.git)他是Git用来保存元数据和对象数据库的地方.该目录非常重要,每次克隆镜像仓库的时候,实际拷贝的就是这个目录里的数据</p></blockquote><h5 id="_1、在工作目录中修改某些文件" tabindex="-1">①、在工作目录中修改某些文件 <a class="header-anchor" href="#_1、在工作目录中修改某些文件" aria-label="Permalink to &quot;①、在工作目录中修改某些文件&quot;">​</a></h5><blockquote><p>从项目中取出某个版本的所有文件和目录,用以开始后续工作的叫做工作目录,这些文件实际上都是从Git目录中的压缩对象数据库中提取出来的,接下去就可以在工作目录中对这些文件进行编辑</p></blockquote><h5 id="_2、保存到暂存区域-对暂存区做快照" tabindex="-1">②、保存到暂存区域,对暂存区做快照 <a class="header-anchor" href="#_2、保存到暂存区域-对暂存区做快照" aria-label="Permalink to &quot;②、保存到暂存区域,对暂存区做快照&quot;">​</a></h5><blockquote><p>暂存区域只不过是个简单的文件,一般都放在Git目录中,有时候人们会把这个区域的文件叫做索引文件,不过标准说法还是叫暂存区域</p></blockquote><h5 id="_3、提交更新" tabindex="-1">③、提交更新 <a class="header-anchor" href="#_3、提交更新" aria-label="Permalink to &quot;③、提交更新&quot;">​</a></h5><blockquote><p>将保存区在暂存区域的文件快照永久转储到本地数据库(Git目录)中</p></blockquote><p>我们可以从文件所处位置来判断状态:如果是Git目录中保存着的特定版本文件,就属于提交版本;如果做了修改并已放入暂存区域,就属于已暂存状态;如果自上次去除后,做了修改但还没有放到暂存区域,就是已修改状态</p><h2 id="三、对象详解-底层命令" tabindex="-1">三、对象详解(底层命令) <a class="header-anchor" href="#三、对象详解-底层命令" aria-label="Permalink to &quot;三、对象详解(底层命令)&quot;">​</a></h2><h3 id="_1、git对象" tabindex="-1">1、git对象 <a class="header-anchor" href="#_1、git对象" aria-label="Permalink to &quot;1、git对象&quot;">​</a></h3><blockquote><ol><li>key:val 组成的键值对(key是val相应的hash)</li></ol><p>​ 键值对在git内部是blob类型(git特有)</p><ol start="2"><li>存储数据文件内容,也称为数据对象</li></ol></blockquote><h5 id="_1-直接写入git对象方法与读取-存入-git-objects" tabindex="-1">① 直接写入git对象方法与读取(存入&quot;.git/objects&quot;) <a class="header-anchor" href="#_1-直接写入git对象方法与读取-存入-git-objects" aria-label="Permalink to &quot;① 直接写入git对象方法与读取(存入&quot;.git/objects&quot;)&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#将打印内容写入对象(git数据库)并且返回其相应哈希值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;写入的对象内容&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash-object</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stdin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#读取内容并不能直接cat读取,因为git存入时已经加密,需要如下代码 -p:内容  -t:类型</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat-file</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 存入对象的哈希值</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">此值可以由上一步得到</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#将文件写入git对象,即我们常见的版本控制中出现的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash-object</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./test.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#查看Git存储的数据  返回其文件夹内的所有哈希文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git/objects</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span></span></code></pre></div><h3 id="_2、树对象" tabindex="-1">2、树对象 <a class="header-anchor" href="#_2、树对象" aria-label="Permalink to &quot;2、树对象&quot;">​</a></h3><blockquote><p>树对象是存储键值 作用为控制版本,如我们的版本前回退 就是在操作这个对象的(指向改变)</p><p>作用就是生成快照</p><p>这个也是git的必杀特性,因为他的切换分支与版本都很快 只是指针切换</p></blockquote><h4 id="构建树对象" tabindex="-1">构建树对象 <a class="header-anchor" href="#构建树对象" aria-label="Permalink to &quot;构建树对象&quot;">​</a></h4><blockquote><p>我们可以通过 update-index , write-tree , read-tree 等命令来构建树对象并且塞到暂存区</p></blockquote><h5 id="_1-利用-update-index-命令-创建暂存区" tabindex="-1">① 利用 <code>update-index</code> 命令 创建暂存区 <a class="header-anchor" href="#_1-利用-update-index-命令-创建暂存区" aria-label="Permalink to &quot;① 利用 \`update-index\` 命令 创建暂存区&quot;">​</a></h5><blockquote><p>利用 <code>update-index</code> 命令 为test.txt文件的首个版本创建一个暂存区,并通过<code>write-tree</code>命令生成树对象</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#1生成一个树对象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-index</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cacheinfo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100664</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">文件状态码:普通文件</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">哈希值</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 对应文件名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#生成快照(树对象)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> write-tree</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#2 将第一个树对象加入第二个树对象,使其成为新的树对象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> read-tree</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -prefix=bak</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 哈希值</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">树对象的</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> write-tree</span></span></code></pre></div><h5 id="_2-查看暂存区当前样子" tabindex="-1">② 查看暂存区当前样子 <a class="header-anchor" href="#_2-查看暂存区当前样子" aria-label="Permalink to &quot;② 查看暂存区当前样子&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls-files</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span></span></code></pre></div><h3 id="_3、提交对象" tabindex="-1">3、提交对象 <a class="header-anchor" href="#_3、提交对象" aria-label="Permalink to &quot;3、提交对象&quot;">​</a></h3><blockquote><ol><li>通过上述两个对象操作后,你会发现你已经生成了不同项目的快照,但是问题是:如果想重用这些快照,你必须记住所有三个 SHA-1(快照)哈希值 .但是,你也完全不知道是谁保存了这些快照,在什么时刻保存的,以及为什么保存这些快照.而以上这些,正是提交对象(commit object)能为你保存的基本信息</li><li>我们可以通过调用commit-tree命令创建一个提交对象,为此需要指定一个树对象的SHA-1值,为此需要指定一个树对象的SHA-1值 , 以及该提交的父提交对象(如果有的话,第一次将暂存区做快照就没有父对象)</li><li>真正的一个版本其实就是提交对象</li></ol></blockquote><h5 id="_1-创建提交对象" tabindex="-1">① 创建提交对象 <a class="header-anchor" href="#_1-创建提交对象" aria-label="Permalink to &quot;① 创建提交对象&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;first commit&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit-tree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 树对象的哈希值</span></span></code></pre></div><p>②指定一个树对象的SHA-1值 , 以及该提交的父提交对象</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;second commit&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit-tree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 提交的树对象哈希值</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 父亲树对象哈希值</span></span></code></pre></div><h2 id="四、高层命令" tabindex="-1">四、高层命令 <a class="header-anchor" href="#四、高层命令" aria-label="Permalink to &quot;四、高层命令&quot;">​</a></h2><h3 id="_1、git-add" tabindex="-1">1、git add . <a class="header-anchor" href="#_1、git-add" aria-label="Permalink to &quot;1、git add  .&quot;">​</a></h3><blockquote><ol><li><p>会将工作目录的修改,保存成git对象 <code>先到版本库,再到暂存区</code>,而不是直接到暂存区</p></li><li><p>在工作目录修改几个文件,就会生成几个git对象(一个文件对应一个git文件)</p></li><li><p>同一个文件,每次修改再add的时候都会生成一个新的git对象,是<code>增量</code>而不是覆盖</p></li><li><p>所以说git是绝对安全的,就算我只存到暂存区没有提交 git也会给我保存</p></li><li><p>只有后面提交的时候,才会根据暂存区内容给我生成树对象并存入版本区,然后加上我们的提交信息,才生成提交对象存入版本库</p></li></ol></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#相当于以下两个命令集合</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hash-object</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">修改了多少个工作目录中的文件,就要被执行几次</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div><h3 id="_2、git-commit-m-注释内容" tabindex="-1">2、git commit -m &quot;注释内容&quot; <a class="header-anchor" href="#_2、git-commit-m-注释内容" aria-label="Permalink to &quot;2、git  commit -m &quot;注释内容&quot;&quot;">​</a></h3><blockquote><p>将暂存区提交到版本库</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> write-tree</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit-tree</span></span></code></pre></div><blockquote><p>跳过暂存区存入(之前add过的,直接提交)</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span></code></pre></div><h3 id="_3、git-init" tabindex="-1">3、git init <a class="header-anchor" href="#_3、git-init" aria-label="Permalink to &quot;3、git init&quot;">​</a></h3><blockquote><p>初始化仓库 初始化后,在当前目录下出现一个名为.git的文件夹</p></blockquote><h3 id="_4、git-status" tabindex="-1">4、git status <a class="header-anchor" href="#_4、git-status" aria-label="Permalink to &quot;4、git status&quot;">​</a></h3><blockquote><p>查看文件的状态</p></blockquote><h3 id="_5、git-diff" tabindex="-1">5、git diff <a class="header-anchor" href="#_5、git-diff" aria-label="Permalink to &quot;5、git diff&quot;">​</a></h3><ol><li><p>当前做的那些更新没有暂存?</p><p>命令:<code>git diff</code>(不加参数直接输入git diff)</p></li><li><p>有哪些更新已经暂存起来准备好了下次提交</p><p>命令:<code>git diff --cached</code>或者<code>git diff --staged(1.6.1以上版本)</code></p></li></ol><h3 id="_6、git-log" tabindex="-1">6、git log <a class="header-anchor" href="#_6、git-log" aria-label="Permalink to &quot;6、git log&quot;">​</a></h3><blockquote><ol><li><p><code>git log</code>(不带参数)</p><p><code>空格键</code>往下翻页 <code>b</code>向上翻页 <code>q</code>退出日志查阅</p></li><li><p>git log --oneline</p><p>将日志信息拍成一行显示</p></li><li><p>git reflog</p><p>所有的日志信息</p></li><li><p>git log --oneline --decorate --graph --all</p><p>查看所有的分支信息命令</p></li></ol></blockquote><h3 id="_7、git-rm" tabindex="-1">7、git rm <a class="header-anchor" href="#_7、git-rm" aria-label="Permalink to &quot;7、git rm&quot;">​</a></h3><blockquote><p>删除工作目录对应的文件,再将修改添加到暂存区(如同删除后给你用了 <code>git add 文件名</code>)</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#删除命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#直接提交修改,因为rm命令帮你提交到暂存区了</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xxx&quot;</span></span></code></pre></div><h3 id="_8、git-mv" tabindex="-1">8、git mv <a class="header-anchor" href="#_8、git-mv" aria-label="Permalink to &quot;8、git mv&quot;">​</a></h3><blockquote><p>将工作目录中的文件进行重命名,再将修改添加到暂存区</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 原文件名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  新文件名</span></span></code></pre></div><h2 id="五、配别名" tabindex="-1">五、配别名 <a class="header-anchor" href="#五、配别名" aria-label="Permalink to &quot;五、配别名&quot;">​</a></h2><blockquote><p>Git并不会在你输入部分命令时自动推断出你想要的命令,如果不想每次都输入完整的Git命令,可以通过git config 文件来轻松为每一个命令设置一个别名</p><p>此处运行后将会写入你的配置文件,可以进入配置文件直接删除</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alias.自定义命令</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\` 命令后面的指令 &quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#如配置查看分支信息 &quot;git log --oneline --decorate --graph --all&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alias.logbranch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;log --oneline --decorate --graph --all&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#配置切换分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alias.co</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#使用方式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logbranch</span></span></code></pre></div><h2 id="六、分支" tabindex="-1">六、分支 <a class="header-anchor" href="#六、分支" aria-label="Permalink to &quot;六、分支&quot;">​</a></h2><blockquote><ol><li><p>前言:</p><p>几乎所有的版本控制系统都以某种形式支持分支.使用分支意味着你可以把你的工作从开发主线上分离开来,以免影响开发主线.在很多版本控制系统中,这是略微低效的过程--常常需要完全创建一个源代码目录的副本,对于大项目来说,这会耗费很多时间,而Git的分支模型极其的高校轻量,是Git的必杀特性,也正因为这一特性,是的Git从众多版本控制系统中脱颖而出</p></li><li><p>分支的本质:</p><p><code>Git的分支,其实本质上是提交对象</code>,,所有的分支都有机会被HEAD引用(<code>HEAD一个时刻只会指向一个分支</code>),当我们有新的提交的时候 HEAD会携带当前持有的分支向前移动</p><p>Git的默认分支名字是master,在多次提交后,你其实已经有一个指向最后那个提交对象的master分支.他会在每次的提交操作中自动向前</p><p>注意:Git的&quot;master&quot;分支并不是一个特殊分支.她就跟其他分支完全没有区别.之所以几乎每个仓库都有master分支,是因为<code>git init</code>命令默认创建它,并且大多数人懒得区改动它</p></li><li><p>分支的原理:</p><ol><li><p><code>.git/refs</code>目录中保存了分支及其对应的提交对象</p></li><li><p>当运行类似于<code>git branch (branchname)</code>这样的命令时,Git会取得当前所在分支最新提交对应的SHA-1值,并将其加入你想要创建的任何新分支中</p></li><li><p>当你执行<code>git branch (branchname)</code>时,Git如何知道最新提交的SHA-1值呢?答案是HEAD文件</p><p><code>HEAD文件</code>是一个符号引用(stmbolic reference),指向目前所在的分支.所谓符号医用,意味着它并不像普通引用那样包含一个SHA-1值.它时一个指向其他引用的指针</p></li></ol></li></ol></blockquote><h3 id="_1、git-branch" tabindex="-1">1、git branch <a class="header-anchor" href="#_1、git-branch" aria-label="Permalink to &quot;1、git branch&quot;">​</a></h3><blockquote><ol><li><p>git branch(不加参数)</p><p>作用:<code>显示所有分支</code>信息</p></li><li><p>git branch 分支名</p><p>作用:<code>创建分支</code></p></li><li><p>git branch -v</p><p>作用:查看每一个分支最后一次提交</p></li><li><p>git branch -d(-D强制删除) 分支名</p><p>作用:<code>删除分支</code>,小d需要你这个分支是干净的才能删除(如已合并)</p></li><li><p>git branch --merged</p><p>作用:查看那些分支已经合并到当前分支</p><p>在这个列表中的分支名字前没有*号的分支通常可以使用<code>git branch -d</code> 删除掉</p></li><li><p>git branch --no-merged</p><p>作用:查看所有包含未合并工作的分支</p><p>尝试使用<code>git branch -d</code>命令删除在这个列表中的分支时会失败,如果真的想要删除分支并丢掉哪些工作,可以使用<code>-D</code> 选项爱强制删除它</p></li><li><p>git log --oneline --decorate --graph --all</p><p>作用:查看所有的分支信息命令</p></li><li><p>git branch 分支名 commitHash</p><p>作用:新建一个分支,并且使分支指向对应的提交对象(版本穿梭<code>可以替代撤销与重置</code>)</p></li></ol></blockquote><h3 id="_2、git-checkout-分支名" tabindex="-1">2、git checkout 分支名 <a class="header-anchor" href="#_2、git-checkout-分支名" aria-label="Permalink to &quot;2、git checkout 分支名&quot;">​</a></h3><blockquote><p>作用:<code>切换分支</code> checkout还有其他作用,后面会提到</p><p>它会动三个地方:HEAD(指针) 暂存区 工作目录</p></blockquote><blockquote><ol><li><p><code>注意</code>:分支切换会改变你工作目录中的文件,所以在切换分支时,一定要注意你的工作目录里的文件会被改变,如果时切换到一个比较旧的分支,你的工作目录会回复到该分支最后一次提交的样子,如果Git不能干净利落的完成这个任务,它将禁止切换分支</p></li><li><p><code>坑</code>:在切换分支时, 如果当前分支上由未暂存的修改(<code>第一次</code>) 或者 有未提交的暂存<code>(第一次</code>) 分支可以切换成功,但是这种操作可能会污染其他分支</p><p>ps:<code>第一次</code>--当前分支如果已经提交过一次,将不让你切换,但是第一次没有提交过,git会帮你保存文件 但是它并不知道新增修改是属于哪个分支,所以会带回当前分支</p></li><li><p>最佳操作方式:<code>每次在切换分支前,需要提交一下当前分支(先使用status查看状态)</code></p></li></ol></blockquote><h3 id="_3、git-checkout-b-新的分支名" tabindex="-1">3、git checkout -b &quot;新的分支名&quot; <a class="header-anchor" href="#_3、git-checkout-b-新的分支名" aria-label="Permalink to &quot;3、git checkout -b &quot;新的分支名&quot;&quot;">​</a></h3><blockquote><p>创建并进入该分支,类似于上面两个命令集合</p></blockquote><h3 id="_4、模拟实战流程" tabindex="-1">4、模拟实战流程 <a class="header-anchor" href="#_4、模拟实战流程" aria-label="Permalink to &quot;4、模拟实战流程&quot;">​</a></h3><blockquote><ol><li><p>需要解决主程序的的一个小BUG,所以使用<code>git checkout -b &quot;iss_bug&quot;</code>新建分支并在这个分支进行bug调修</p></li><li></li><li><p>当你将紧急bug修复后,进行提交,确定status干净后切换回master分支,进行合并:代码如下</p></li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hit_bug</span></span></code></pre></div><ol start="4"><li>修改完后再查看status(这是个好习惯,防止偶尔记忆混淆造成不必要的麻烦),再切换至普通bug分支<code>iss_bug</code>进行修改,成功后切换回去合并</li><li>如果出现冲突,去出现冲突的文件手动修改(决定保留那部分代码),再进行<code>git add</code>表示冲突解决,在进行提交</li></ol></blockquote><h3 id="_5、合并分支" tabindex="-1">5、合并分支 <a class="header-anchor" href="#_5、合并分支" aria-label="Permalink to &quot;5、合并分支&quot;">​</a></h3><blockquote><p>命令: <code>git merge branchname</code>(分支名)</p><p>注意:合并分支时要先切换到<code>主要分支</code>(即下面的被合并分支),在这个分支上进行合并新分支,使得这个分支进行版本更新</p><ol><li><p>快进合并--&gt;不会产生冲突</p><p>​ 指被合并分支并没有进行修改,停留在原地,只有新分支进行修改更新,更 新完成后进行合并,原版本相当于直接前进版本,称为快进合并</p></li><li><p>典型合并--&gt;有可能产生冲突</p><p>​ 指被合并分支在新分支进行开发时,本身也进行修改开发,可能会改动到同 一代码或者文件而产生重复修改</p></li><li><p>解决冲突:<code>打开冲突的文件</code> 进行修改 ,修改完成后进行:<code>add标记修改完成</code>,然后commit进行提交</p></li></ol></blockquote><blockquote><p><code>git 在pull或者合并分支</code>的时候有时会遇到一个第一段是黄色,下面文字是青色(偏蓝色)。可以不管(直接下面3,4步)，如果要输入解释的话就需要:</p><p>1.按键盘字母 i 进入insert模式</p><p>2.修改最上面那行黄色合并信息,可以不修改</p><p>3.按键盘左上角&quot;Esc&quot;</p><p>4.输入&quot;:wq&quot;,注意是冒号+wq,按回车键即可</p></blockquote><h2 id="七、存储" tabindex="-1">七、存储 <a class="header-anchor" href="#七、存储" aria-label="Permalink to &quot;七、存储&quot;">​</a></h2><blockquote><ol><li><p>需求背景:</p><p>有时,当你在项目的一部分上已经工作了一段时间后,所有东西都进入了混乱的状态,而这时你想要切换到另一个分支做一点别的事情.问题是,你不想仅仅因为过会儿回到这一点而做了一半的工作创建一次提交</p></li><li><p>解决:</p><p>针对这个问题的答案是 <code>git stash</code> 命令(当然,直接提交<code>commit</code>也可以,这个是用来不想生成提交对象而用)</p></li><li><p>原理:</p><p>git切换分支之所以保留你的未提交的修改文件,是因为它不想你因为误操作使得之前代码报废所以会当你status不干净时组织你切换分支(<code>ps</code>:如果是第一次创建的文件没有追踪过,它不认识是属于那份分支将会带到你切换后的分支造成污染),</p><p>而你将其保存到栈上(<code>ps</code>:换句话说将这部分内容抽取到一个类似共有的栈上,你在哪个分支都能够通过命令取到),git就知道你这个内容已经储存并不会造成切换分支使得你写的代码丢失,便不会阻止你切换分支或者切换带文件污染分支</p></li></ol></blockquote><h3 id="_1、git-stash" tabindex="-1">1、git stash <a class="header-anchor" href="#_1、git-stash" aria-label="Permalink to &quot;1、git stash&quot;">​</a></h3><blockquote><p><code>git stash</code>命令会将未完成的修改保存到一个栈上,而你可以在任何时候重新应用这些改动(<code>git stash apply</code>),</p><p><code>注意!!!!!</code>:使用前你要先<code>git add .</code>,否则你会发现,你执行此命令后,没有追踪的部分全部消失了</p></blockquote><h3 id="_2、git-stash-list" tabindex="-1">2、git stash list <a class="header-anchor" href="#_2、git-stash-list" aria-label="Permalink to &quot;2、git stash list&quot;">​</a></h3><blockquote><p>查看存储</p></blockquote><h3 id="_3、git-stash-pop" tabindex="-1">3、git stash pop <a class="header-anchor" href="#_3、git-stash-pop" aria-label="Permalink to &quot;3、git stash pop&quot;">​</a></h3><blockquote><p>来应用储藏然后立即从栈上扔掉它 <code>这是最推荐的使用</code></p></blockquote><h3 id="_4、-git-stash-apply-stash-2" tabindex="-1">4、&#39;git stash apply stash @{2}&#39; <a class="header-anchor" href="#_4、-git-stash-apply-stash-2" aria-label="Permalink to &quot;4、&#39;git stash apply stash @{2}&#39;&quot;">​</a></h3><blockquote><p>如果不指定一个储藏,git认为指定栈顶<code>不常用</code></p></blockquote><h3 id="_5、git-stash-drop-储藏的名字" tabindex="-1">5、git stash drop &quot;储藏的名字&quot; <a class="header-anchor" href="#_5、git-stash-drop-储藏的名字" aria-label="Permalink to &quot;5、git stash drop &quot;储藏的名字&quot;&quot;">​</a></h3><blockquote><p>加上要储藏的名字移除他 <code>不常用</code></p></blockquote><h3 id="_6、git-stash-clear" tabindex="-1">6、git stash clear <a class="header-anchor" href="#_6、git-stash-clear" aria-label="Permalink to &quot;6、git stash clear&quot;">​</a></h3><blockquote><p>在查看存储后,运行此命令 清空stash栈</p></blockquote><h2 id="八、撤销与重置" tabindex="-1">八、撤销与重置 <a class="header-anchor" href="#八、撤销与重置" aria-label="Permalink to &quot;八、撤销与重置&quot;">​</a></h2><blockquote><p>特别是重置部分理解即可(用到了再去查),撤销尽量可以掌握</p></blockquote><h3 id="i-撤销" tabindex="-1">Ⅰ- 撤销 <a class="header-anchor" href="#i-撤销" aria-label="Permalink to &quot;Ⅰ- 撤销&quot;">​</a></h3><h4 id="_1、git-commit-amend" tabindex="-1">1、git commit --amend <a class="header-anchor" href="#_1、git-commit-amend" aria-label="Permalink to &quot;1、git commit --amend&quot;">​</a></h4><blockquote><ol><li><p>这个命令会将暂存区中的文件提交,修订提交(<code>不是撤销而是重新提交</code>)</p></li><li><p>如果自上次提交以来你还未做任何修改(如:在上次提交后马上执行此命令),那么快照会保持不变,而你修改的只是提交信息</p></li><li><p>如果你提交后发现忘记了暂存某些需要的修改,可以像下面这样操作</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;错误的注释&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #或者commit了错误的修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;文件名或者.&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #重新add正确的文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --amend</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		#进行重新提交</span></span></code></pre></div><p>最终你只会有一个提交 (第二次提交将会替代第一次提交)</p></li><li><p>可以修改上次提交的文件与注释</p></li></ol></blockquote><h4 id="_2、git-reset" tabindex="-1">2、git reset <a class="header-anchor" href="#_2、git-reset" aria-label="Permalink to &quot;2、git reset&quot;">​</a></h4><blockquote><ol><li>一般我们写完代码后,是这样提交的:</li></ol><ul><li>git add . //添加追踪所有文件</li><li>git commit -m &quot;feat(前端-Git学习详细笔记):更新撤销commit操作&quot; //添加commit提交信息</li></ul><ol start="2"><li>但是commit写完提交信息后,突然想到还有一个地方代码没改到/保存,如果放到下一个commit却不合适(同一个功能修改,分成两个commit),原因详见下方的 <a href="https://gitee.com/hongjilin/hongs-study-notes/tree/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0#%E2%85%A3-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99" target="_blank" rel="noreferrer">版本控制工具的使用基本原则</a></li><li>执行此命令命令:<code>git reset --soft HEAD^</code></li></ol><ul><li>HEAD^的意思是上一个版本，也可以写成HEAD~1</li><li>如果你进行了2次commit，想都撤回，可以使用HEAD~2</li><li>详见下方 <a href="https://gitee.com/hongjilin/hongs-study-notes/tree/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0#reset%E4%B8%89%E9%83%A8%E6%9B%B2" target="_blank" rel="noreferrer">reset三部曲</a></li></ul><p>作用:将文件从<code>暂存区中撤回</code>到工作目录中(仅仅是撤回commit操作，你写的代码仍然保留)</p></blockquote><h4 id="_3、git-checkout" tabindex="-1">3、git checkout <a class="header-anchor" href="#_3、git-checkout" aria-label="Permalink to &quot;3、git checkout&quot;">​</a></h4><blockquote><p>是的,你没看错,这个是切换分支的命令,但是他也能用来<code>撤销文件修改</code></p><p>命令:<code>git checkout --文件名</code></p><p>将在工作目录中对文件的修改撤销</p><p><code>注意</code>:这是一个危险的命令,这很重要.你对那个文件做的任何修改都会消失--你只是拷贝了另一个文件(原来版本的文件)来覆盖它.除非你确实秦楚不想要那个文件了,否则不要使用这个命令</p></blockquote><h3 id="ii-重置reset" tabindex="-1">Ⅱ - 重置reset <a class="header-anchor" href="#ii-重置reset" aria-label="Permalink to &quot;Ⅱ - 重置reset&quot;">​</a></h3><blockquote><p>注意:<code>--hard</code>标记是<code>reset</code>命令唯一的<code>危险用法</code>,也是Git真正的销毁数据的几个仅有操作之一.其他任何形式的<code>reset</code>调用都可以轻松撤销,但是<code>--hard</code>选项不能,因为它强制覆盖了工作目录中的文件.</p><p>如在这种特殊情况:我们的Git数据库中的一个提交内还留有该文件的几个版本,我们可以通过<code>reflog</code>来找回它,但若是该文件还未提交,Git仍会覆盖他导致它无法恢复</p></blockquote><h4 id="reset三部曲" tabindex="-1">reset三部曲 <a class="header-anchor" href="#reset三部曲" aria-label="Permalink to &quot;reset三部曲&quot;">​</a></h4><blockquote><p>第一部:git reset --soft HEAD~(等于之前的--amend,后面如果跟随数字,就是回退几个版本,默认1个)</p><p>​ 移动HEAD (但带着分支一起移动,与checkout不同(它只动HEAD)) --&gt;相当于回到你没有 [ commit ]的时候,代码仍在</p><p>第二部:git reset --mixed HEAD~</p><p>​ 移动HEAD 并且动了了暂存区</p><p>第三部:git reset --hard HEAD~</p><p>​ 移动HEAD 并且动了了暂存区 动了工作目录 ( 你的提交的代码也会没掉 )</p></blockquote><h3 id="iii-错误的git-push提交成功后如何撤销回退" tabindex="-1">Ⅲ - 错误的git push提交成功后如何撤销回退 <a class="header-anchor" href="#iii-错误的git-push提交成功后如何撤销回退" aria-label="Permalink to &quot;Ⅲ -  错误的git push提交成功后如何撤销回退&quot;">​</a></h3><blockquote><p>我们在使用Git进行版本控制时，有可能会出现这种情况。git push后发现提交的内容不是想要的，这时候我们怎么做呢，提交上去的内容是没有删除按钮的（比如github，或码云）。所以我们需要一些手段将提交上去内容撤销下来。</p><p>而要撤销,就要用到上面所学的 <code>git reset</code></p></blockquote><h4 id="_1、错误场景示范" tabindex="-1">1、错误场景示范 <a class="header-anchor" href="#_1、错误场景示范" aria-label="Permalink to &quot;1、错误场景示范&quot;">​</a></h4><blockquote><p>Ⅰ- 当我撰写 [ commit ] 信息没注意到,以为是对的时候直接提交 --&gt; 因为本人提交笔记时喜欢按 [ ↑ ] 找到之前的提交信息进行修改</p><img src="`+r+'" alt="image-20210813153403664" style="zoom:67%;"><p>Ⅱ- 此时可以看到,错误的 [ commit ] 已经提交了 (当然,适用场景不只是commit ,也可错误代码之类的)</p><p><img src="'+i+'" alt="image-20210813155746112"></p></blockquote><h4 id="_2、回退操作" tabindex="-1">2、回退操作 <a class="header-anchor" href="#_2、回退操作" aria-label="Permalink to &quot;2、回退操作&quot;">​</a></h4><blockquote><p>咱们操作稳重一点,使用git reset --soft HEAD~就好了(如果回退后代码也不想要,可以用<code>git stash</code>,暂存,达到代码也回退的效果)</p></blockquote><h5 id="_1-git-reflog" tabindex="-1">① git reflog <a class="header-anchor" href="#_1-git-reflog" aria-label="Permalink to &quot;① git reflog&quot;">​</a></h5><blockquote><p>commits，它在git中扮演了一个重要角色，我们平常用的一些操作git clone ,git commit 都会产生commits，通俗的讲这个就是版本号，但是git reset并不会产生commits（不是不会产生，而是会产生 但是都是一样的），我们可以先看看自己项目中的commits，使用如下命令:<code>git reflog</code></p><p><img src="'+s+'" alt="image-20210813154309057"></p></blockquote><h5 id="_2-git-reset-soft-head" tabindex="-1">② git reset --soft HEAD~ <a class="header-anchor" href="#_2-git-reset-soft-head" aria-label="Permalink to &quot;②  git  reset --soft HEAD~&quot;">​</a></h5><blockquote><p>运行此代码后,我们的 [ HEAD ] 指向了上一个 [ commits ]</p><p><img src="'+a+'" alt="image-20210813154448889"></p></blockquote><h5 id="_3-查看缓存" tabindex="-1">③ 查看缓存 <a class="header-anchor" href="#_3-查看缓存" aria-label="Permalink to &quot;③  查看缓存&quot;">​</a></h5><blockquote><ul><li><p>此时你可以用<code>stash staus</code>查看,会发现,之前提交的代码已经放回缓存区了</p></li><li><p>如果你不想要此次提交所有代码,可以使用<code>git stash</code> ,然后再去清空即可(当然,本人此处还是需要的,所以要留下)</p><p><img src="'+t+'" alt="image-20210813154839981"></p></li></ul></blockquote><h5 id="_4-重新撰写-commit-信息" tabindex="-1">④ 重新撰写 [ commit ]信息 <a class="header-anchor" href="#_4-重新撰写-commit-信息" aria-label="Permalink to &quot;④ 重新撰写 [ commit ]信息&quot;">​</a></h5><blockquote><p><img src="'+e+'" alt="image-20210813154928064"></p></blockquote><h5 id="_5-强制提交" tabindex="-1">⑤ 强制提交 <a class="header-anchor" href="#_5-强制提交" aria-label="Permalink to &quot;⑤ 强制提交&quot;">​</a></h5><blockquote><p>如果你重新撰写 [ commit ] 后马上重新push,你会发现无法提交: 因为我们当前落后远程一个版本!</p><p>所以此时直接强制提交即可,就能覆盖远程提交记录</p><blockquote><p><code>git push -f</code></p></blockquote><p><img src="'+l+'" alt="image-20210813155049169"></p></blockquote><h4 id="_3、成功展示" tabindex="-1">3、成功展示 <a class="header-anchor" href="#_3、成功展示" aria-label="Permalink to &quot;3、成功展示&quot;">​</a></h4><blockquote><ul><li>在网站工作台首页能看到已经将更改后的 [ coommit ] 强制推送上来了</li></ul><p>也许你会奇怪:为啥工作台上还能看到? 其实已经删了!!!你看下方</p><p><img src="'+h+'" alt="image-20210813155614570"></p><ul><li>但是你查看提交记录,会发现之前错误的commit已经被覆盖</li></ul><img src="'+o+`" alt="image-20210813155339300" style="zoom:80%;"></blockquote><h2 id="九、数据恢复" tabindex="-1">九、数据恢复 <a class="header-anchor" href="#九、数据恢复" aria-label="Permalink to &quot;九、数据恢复&quot;">​</a></h2><blockquote><p>在你使用Git的时候,你可能会意外丢失一次提交:</p><p>①通常这是因为你强制删除了正在工作的分支,但是最后你却需要这个分支;②抑或是你硬重置了一个分支,放弃了你想要的提交.</p><p>如果这些事情已经发生,该如何找回你的提交呢?</p></blockquote><h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h3><blockquote><p>推荐方法最好是<code>直接看恢复</code>,上面实例时当你使用硬重置回当初未删除版本进行恢复,出现的一系列问题解决</p></blockquote><blockquote><ol><li>假设你已经提交了五次,而现在,我们将master分支硬重置到了第三次提交来找回当时删除的分支.但是这时候你会发现一个事情:</li></ol><p>现在顶部的两个提交已经丢失了-没有分支指向这些提交(因为你将指针移到了第三个,那么前面两个就找不到了)</p><ol start="2"><li>你现在已经得到并且恢复当时第三次还存在的的提交了(<code>恢复方法在下面,恢复文件到这步,下面3、4是回到最新版本</code>)</li></ol><p>现在准备回到当初最新的版本时,你发现你进行打印竟然没有前面两次提交信息(你需要他的哈希值进行版本穿梭或者重置),你需要最新一次提交的哈希值,但是你估计想不起来了,对吗?</p><ol start="3"><li><p>最方便,也是最常用的方法,是使用一个名叫<code>log reflog</code>的工具(前面高层命令提过),当你在工作时,Git会默默记录每一次你改变的HEAD时它的值,每一次你提交或者改变分支,引用日志都会被刷新</p></li><li><p>如果<code>git reflog</code>显示的内容你觉得不足够多,可以执行<code>git log -g</code>,这个命令会以标准日志的格式输出引用日志</p></li></ol></blockquote><h3 id="恢复-推荐的" tabindex="-1">恢复 <code>推荐的</code> <a class="header-anchor" href="#恢复-推荐的" aria-label="Permalink to &quot;恢复 \`推荐的\`&quot;">​</a></h3><blockquote><ol><li><p>通过<code>git reflog</code>找到你需要的文件还未删除的版本哈希值,那个就是你丢失的提交,你可以通过创建一个新的分支指向这个提交来恢复它.</p><p>例如:你可以创建一个名为<code>recover-branch</code>的分支执行这个提交</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> recover-branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 当前需要恢复</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">之前丢失的</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">的提交哈希值</span></span></code></pre></div></li><li><p>现在有一个名为<code>recover-branch</code>的分支是你的<code>master</code>分支曾经指向的地方(即当时你删除该需要的文件的前的那个版本),这样你在这次提交的版本后,也能通过切换这个分支得到曾丢失的文件</p></li><li><p>这个分支功能能帮你做很多东西,善用分支,Git最强功能</p></li></ol></blockquote><h2 id="十、打tag" tabindex="-1">十、打tag <a class="header-anchor" href="#十、打tag" aria-label="Permalink to &quot;十、打tag&quot;">​</a></h2><blockquote><p>Git可以给历史中的某一次提交打上标签,表示重要.比较有代表性的是人们会用这个功能来<code>标记发布节点</code>(v1.0等等)</p></blockquote><h3 id="_1、列出标签" tabindex="-1">1、列出标签 <a class="header-anchor" href="#_1、列出标签" aria-label="Permalink to &quot;1、列出标签&quot;">​</a></h3><blockquote><p>命令:<code>git tag</code> 或者 <code>git tag -l &#39;v1.*&#39;</code></p><p>​ 前者列出所有,后者列出以<code>v1.</code>开头的所有</p></blockquote><h3 id="_2、创建标签" tabindex="-1">2、创建标签 <a class="header-anchor" href="#_2、创建标签" aria-label="Permalink to &quot;2、创建标签&quot;">​</a></h3><blockquote><p>git使用两种主要类型的标签:轻量标签 与 附注标签</p></blockquote><h5 id="_1轻量标签" tabindex="-1">①轻量标签 <a class="header-anchor" href="#_1轻量标签" aria-label="Permalink to &quot;①轻量标签&quot;">​</a></h5><blockquote><p>轻量标签很像一个不会改变的的分支(他只是一个特定提交的引用),直接在提交前使用命令即可给当前分支打上标签</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#或者下面的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 提交对象哈希</span></span></code></pre></div><h5 id="_2附注标签" tabindex="-1">②附注标签 <a class="header-anchor" href="#_2附注标签" aria-label="Permalink to &quot;②附注标签&quot;">​</a></h5><blockquote><p>附注标签是存储在Git数据库中的一个完整对象.他们是可以被校验的,其中包含打标签者的名字、电子邮件地址、日期时间;通常<code>建议创建复制标签</code>,这样你可以拥有以上所有信息,但如果只是想用一个临时标签,或者由于某些原因不想表村那些信息,轻量标签也是可用的</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 提交对象哈希</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 提交对象哈希</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;我的注释信息&quot;</span></span></code></pre></div><h3 id="_3、查看特定标签" tabindex="-1">3、查看特定标签 <a class="header-anchor" href="#_3、查看特定标签" aria-label="Permalink to &quot;3、查看特定标签&quot;">​</a></h3><blockquote><p><code>git show</code> 可以显示任意类型的对象(git对象 树对象 提交对象 tag对象)</p><p>命令: <code>git show tagname</code></p></blockquote><h3 id="_4、删除标签" tabindex="-1">4、删除标签 <a class="header-anchor" href="#_4、删除标签" aria-label="Permalink to &quot;4、删除标签&quot;">​</a></h3><blockquote><ol><li><p>删除标签 要删除你在本地仓库上的标签,可以使用命令 <code>git tag -d &lt;tagname&gt;</code>如下:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.0</span></span></code></pre></div></li><li><p>应该注意上述命令并不会从任何远程仓库中移出这个标签,你必须使用<code>git push &lt;tamote&gt;:refs/tags/&lt;tagname&gt;</code>来更新你的远程仓库,如下</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :refs/tags/v1.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># origin是你配置的远程仓库地址别名,你可以直接用远程仓库地址</span></span></code></pre></div></li></ol></blockquote><h3 id="_5、捡出标签" tabindex="-1">5、捡出标签 <a class="header-anchor" href="#_5、捡出标签" aria-label="Permalink to &quot;5、捡出标签&quot;">​</a></h3><blockquote><ol><li><p>如果说你想查看某个标签所指向的文件版本,可以使用<code>git checkout</code>命令</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tagname</span></span></code></pre></div></li><li><p>虽然说这会使得你的仓库处于&quot;分离 头指针(deacthed HEAD)&quot;状态.在&quot;分离头指针&quot;状态下,如果你做了某些更改然后提交它们,标签不会发生变化,但你的新提交将不属于任何分支,并且将无法访问,除非访问确切的提交哈希,因此你如果需要进行更改--比如说你需要<code>修复旧版本</code>的错误--这通常需要创建一个新的分支(捡出后创建,就会默认将当前捡出的版本作为新分支的第一版本-前面分支提到过)</p><p>这样就可以修改到旧版本的代码(如同vue的尤雨溪在vue3.x会更新vue1.0版本生态)</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">新的分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ol></blockquote><h1 id="🌈代码风格" tabindex="-1">🌈代码风格 <a class="header-anchor" href="#🌈代码风格" aria-label="Permalink to &quot;🌈代码风格&quot;">​</a></h1><h2 id="_1、eslint" tabindex="-1">1、Eslint <a class="header-anchor" href="#_1、eslint" aria-label="Permalink to &quot;1、Eslint&quot;">​</a></h2><blockquote><p>ESlint是一个开源的JavaScript代码检查工具,由红宝书作者创建</p><p>初衷是为了让程序员可以创建自己的检测规则.ESLint的所有规则都被设计成可插入的</p><p>ESLint使用Node.js编写,这样既可以有一个快速的运行环境同时也便于安装</p><p>此处引入概念,具体学习之后将开新的笔记</p></blockquote><h2 id="_2、commit提交规范" tabindex="-1">2、commit提交规范 <a class="header-anchor" href="#_2、commit提交规范" aria-label="Permalink to &quot;2、commit提交规范&quot;">​</a></h2><blockquote><ol><li><p><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noreferrer">参考自阮一峰老师的文章</a></p></li><li><p>Header</p></li></ol><p>Header部分只有一行，包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选）和<code>subject</code>（必需）。</p><p><strong>（1）type</strong></p><p><code>type</code>用于说明 commit 的类别，只允许使用下面几个标识。</p><blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">feat：新功能（feature）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">to：修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fix：产生diff并自动修复此问题。适合于一次提交直接修复问题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">to：只产生diff不自动修复此问题。适合于多次提交。最终修复问题提交时使用fix</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">docs：文档（documentation）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">style：格式（不影响代码运行的变动）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refactor：重构（即不是新增功能，也不是修改bug的代码变动）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">perf：优化相关，比如提升性能、体验。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test：增加测试。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chore：构建过程或辅助工具的变动。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">revert：回滚到上一个版本。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">merge：代码合并。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sync：同步主线或分支的Bug。</span></span></code></pre></div></blockquote><p>如果<code>type</code>为<code>feat</code>和<code>fix</code>，则该 commit 将肯定出现在 Change log 之中。其他情况（<code>docs</code>、<code>chore</code>、<code>style</code>、<code>refactor</code>、<code>test</code>）由你决定，要不要放入 Change log，建议是不要。</p><p><strong>（2）scope</strong></p><p><code>scope</code>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><p><strong>（3）subject</strong></p><p><code>subject</code>是 commit 目的的简短描述，不超过50个字符。</p><blockquote><ul><li>以动词开头，使用第一人称现在时，比如<code>change</code>，而不是<code>changed</code>或<code>changes</code></li><li>第一个字母小写</li><li>结尾不加句号（<code>.</code>）</li></ul></blockquote></blockquote><h1 id="🌈远程操作" tabindex="-1">🌈远程操作 <a class="header-anchor" href="#🌈远程操作" aria-label="Permalink to &quot;🌈远程操作&quot;">​</a></h1><blockquote><p>三个必须懂的概念</p><ol><li>本地分支</li></ol><p>工作目录中的分支</p><ol start="2"><li>远程跟踪分支</li></ol><p>当你往远程分支<code>push</code>(还有克隆)的时候会创建远程跟踪分支</p><ol start="3"><li>远程分支</li></ol><p>指保存在git网站上的那个远程仓库中的分支</p></blockquote><h3 id="_1、团队协作流程" tabindex="-1">1、团队协作流程 <a class="header-anchor" href="#_1、团队协作流程" aria-label="Permalink to &quot;1、团队协作流程&quot;">​</a></h3><blockquote><ol><li>项目经理初始化远程仓库</li></ol><p>一定要初始化一个空的仓库:再github上操作</p><ol start="2"><li><p>项目经理创建本地仓库</p></li><li><p><code>git remote 别名 仓库地址</code></p></li><li><p><code>git --init</code>,然后将源码复制进来</p></li><li><p>修改用户名 修改邮箱(双账号的才需要这步)</p></li><li><p><code>git add</code> 和 <code>git commit</code></p></li><li><p>项目经理推送到本地仓库到远程仓库</p></li><li><p>清理window凭据</p></li><li><p><code>git push 别名 分支</code>(输入账号密码;推完之后会附带生成远程跟踪分支)</p></li><li><p>项目邀请成员&amp;&amp;成员接受邀请</p></li></ol><p>在git网站上操作</p><ol start="5"><li>成员克隆远程仓库</li></ol><p><code>git clone 仓库地址</code></p><p>只有在克隆的时候 本地分支master 和 远程跟踪分支别名/master 是有同步关系的(可以直接pull或者push后面不用加origin)</p><p>原因是,每次你push的时候是你远程跟踪分支替换掉(同步)你的远程分支，如果你想要新分支能直接push，需要本地分支去追踪远程追踪分支</p><ol start="6"><li><p>成员做出贡献</p></li><li><p>修改源代码文件</p></li><li><p><code>git add -&gt; commit -&gt; push</code></p></li><li><p>项目经理更新修改</p></li><li><p><code>git fetch 别名</code>(将修改同步到远程跟踪分支上)</p></li><li><p>git merge 远程跟踪分支</p></li></ol></blockquote><h3 id="_2、远程库" tabindex="-1">2、远程库 <a class="header-anchor" href="#_2、远程库" aria-label="Permalink to &quot;2、远程库&quot;">​</a></h3><blockquote><p>正常的数据推送 和 拉取步骤</p><ol><li>确保本地分支已经跟踪了远程跟踪分支</li><li>拉取上传数据： git <code>pull</code> or <code>push</code></li></ol></blockquote><h4 id="i-远程跟踪分支" tabindex="-1">Ⅰ-远程跟踪分支 <a class="header-anchor" href="#i-远程跟踪分支" aria-label="Permalink to &quot;Ⅰ-远程跟踪分支&quot;">​</a></h4><blockquote><p>流程与释义:</p><ol><li><p><code>远程跟踪分支</code>是远程分支状态的引用。它们是你不能移动的本地分支。当你做任何网络通信操作时，它们会自动移动</p></li><li><p>它们以（remote）/(branch)形式命名，如果你想要看你最后一次与远程仓库origin时master分支的状态，可以查看origin/master分支</p></li><li><p>当<code>克隆</code>一个仓库时,它通常会自动的创建一个跟踪<code>origin/master</code>的master分支（所以你可以不跟踪直接pull与push后面不跟origin）</p></li><li><p>当我克隆之后，别人新建了一个分支push上去，我这时候想要或者并且跟踪这个新分支，我需要先<code>git fetch origin</code>获取下来，获取下来后想要切换并且跟踪这个分支时使用命令<code>git checkout --track 远程跟踪分支名(origin/分支名)</code></p></li></ol></blockquote><h5 id="做跟踪" tabindex="-1">做跟踪: <a class="header-anchor" href="#做跟踪" aria-label="Permalink to &quot;做跟踪:&quot;">​</a></h5><blockquote><ol><li><p>克隆仓库时,会自动为master做跟踪</p></li><li><p>本地没有分支,要新建分支且追踪</p></li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --track</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程跟踪分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remote/分支名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="3"><li>本地已经创建了分支,</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程跟踪分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remote/分支名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></blockquote><h4 id="ii-本地分支怎么跟踪远程跟踪分支" tabindex="-1">Ⅱ-本地分支怎么跟踪远程跟踪分支 <a class="header-anchor" href="#ii-本地分支怎么跟踪远程跟踪分支" aria-label="Permalink to &quot;Ⅱ-本地分支怎么跟踪远程跟踪分支&quot;">​</a></h4><blockquote><ol><li><p>当克隆的时候 会自动生成一个master本地分支（已经跟踪了对应的远程跟踪分支）</p></li><li><p>在新建其他分支时，可以指定想要跟踪的远程跟踪分支</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 本地分支名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程跟踪分支名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#简写形式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --track</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程跟踪分支名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">origin/分支名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>将一个已经存在的本地分支 改成 一个跟踪分支</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程跟踪分支名</span></span></code></pre></div></li></ol></blockquote><h4 id="iii-冲突" tabindex="-1">Ⅲ-冲突 <a class="header-anchor" href="#iii-冲突" aria-label="Permalink to &quot;Ⅲ-冲突&quot;">​</a></h4><blockquote><ol><li>git本地操作会不会有冲突？</li></ol><p>典型合并的时候（如新建分支合并时）</p><ol start="2"><li>git远程协作的时候会不会有冲突</li></ol><p><code>push</code>与<code>pull</code></p></blockquote><blockquote><p>解决流程：</p><ol><li><p>假设你修改了a.js的代码，已经<code>add &amp;&amp;commit</code>（必须先这样才能提交，才能触发冲突）</p></li><li><p>但是这时别人也改了a.js同一行代码并且已经push上去了，你这时候进行push将会报错</p></li><li><p>这时候你需要先将其pull下来，这时候你会发现你的git将会给你提示，并且在本地的a.js中文件代码中，保留了你们两个的代码（并且会给你标注出来）</p></li><li><p>这时候一定要去与<code>与你冲突的开发人员交流</code>,讨论保留哪一个人的代码，或者进行修改（直接在你pull后的本地目录中修改），修改完成后使用<code>git add .</code>标记解决冲突然后<code>push</code>提交，这样别人pull的时候git就知道这部分时保留哪部分代码，直接覆盖（即在一个地方更改然后标记提交即可）</p></li><li><p>如果你发生冲突<code>不进行沟通</code>，将别人代码<code>直接注释掉</code>，让自己代码能跑，那么--真的很爽</p></li></ol><p>但是别人功能可能就炸了，这时候你会被暴打😏</p><p>因为你解决冲突后（git add .）别人pull的时候并不会提示冲突，因为你用<code>add</code>标记解决了冲突，git认出来后会直接默认<code>覆盖</code>他的代码，不知不觉，你可能就毁了另外一个程序员美好的一天（莫名其妙的BUG导致加班），如果他没反应过来，可能就是两天甚至...，你到时候住院的时间也与这个成正比😏</p></blockquote><h4 id="iv-pull-request-流程" tabindex="-1">Ⅳ- pull request 流程 <a class="header-anchor" href="#iv-pull-request-流程" aria-label="Permalink to &quot;Ⅳ- pull request 流程&quot;">​</a></h4><blockquote><p>​ <code>如果你想要参加某个项目，但是并没有推送权限</code>，这时候可以对这个项目进行”派生“（<code>Fork</code>),派生是指GitHub将在你的空间创建一个完全属于你的项目副本,且你对其有推送权限.通过这种方式,项目的管理者不再需要忙着把用户添加到贡献者列表并给予它们推送权限.人们可以派生这个项目,将修改推送到派生出的项目副本中,并通过创建合并请求(pull request)让它们改动进入原版本库</p><p>基本流程:</p><ol><li>自己在git网站上fork的项目到自己空间中,下面的操作都是基于这个fork的项目</li><li>从master分支中创建一个新的分支</li><li>提交一些修改来改进项目</li><li>将这个分支推送到git上</li><li>创建一个<code>合并</code>请求(在网站上点击发送信息)</li><li>在网站上进行讨论,并且根据实际情况继续修改</li><li>项目的拥有者合并或者关闭你的合并请求</li></ol><p>注意:</p><p>每次在发起新的<code>Pull Request</code>时 要去拉去最新的原仓库的代码 而不是自己fork的那个仓库</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">源仓库名字（自己定义</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">仓库地址链</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">接</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 远程仓库名字</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 对应的远程跟踪分支</span></span></code></pre></div></blockquote><hr><h1 id="🌈版本控制工具的使用基本原则" tabindex="-1">🌈版本控制工具的使用基本原则 <a class="header-anchor" href="#🌈版本控制工具的使用基本原则" aria-label="Permalink to &quot;🌈版本控制工具的使用基本原则&quot;">​</a></h1><h2 id="_1、精准的提交" tabindex="-1">1、精准的提交 <a class="header-anchor" href="#_1、精准的提交" aria-label="Permalink to &quot;1、精准的提交&quot;">​</a></h2><p>每次提交都是一个小儿完整的功能或者一个BUG的修复。不应该出现多个功能点一块提交或者多个BUG一起修复的情况。如果一旦发现提交的代码有问题，可以方便的会滚到改动之前的正确状态，不会影响到其他协作者开发进程。</p><h2 id="_2、频繁的提交" tabindex="-1">2、频繁的提交 <a class="header-anchor" href="#_2、频繁的提交" aria-label="Permalink to &quot;2、频繁的提交&quot;">​</a></h2><p>尽可能频繁的提交你的改动到远程仓库，这样，可以避免将来合并代码的时候产生大量的冲突以至于难以解决。同时，也可以让其他同事比较快的共享你的改动。</p><h2 id="_3、不要提交不完整的功能" tabindex="-1">3、不要提交不完整的功能 <a class="header-anchor" href="#_3、不要提交不完整的功能" aria-label="Permalink to &quot;3、不要提交不完整的功能&quot;">​</a></h2><p>如果你正在开发的新功能比较庞大，那么可以讲这个功能尽可能拆分为几个逻辑模块，并且要保证分次提交的逻辑模块不会影响到整个系统的正确性。如果你只是因为临时的一些事情需要切到别的分支或者是临时需要中断开发（比如说下班）,那么应该使用<code>Stash</code>储藏功能来保存你的更改。 --&gt;<a href="#七、存储">相关知识点部分我跳转</a></p><h2 id="_4、提交前进行测试" tabindex="-1">4、提交前进行测试 <a class="header-anchor" href="#_4、提交前进行测试" aria-label="Permalink to &quot;4、提交前进行测试&quot;">​</a></h2><p>不要想当然的认为自己的代码是正确的，提交之前应该经过充分的测试才能提交，即使是提交到本地仓库，也应该进行测试，因为这些代码在未来会被推送到远程共享给你的同事。</p><h2 id="_5、高质量的提交注释" tabindex="-1">5、高质量的提交注释 <a class="header-anchor" href="#_5、高质量的提交注释" aria-label="Permalink to &quot;5、高质量的提交注释&quot;">​</a></h2><p>每次提交都应该包含完整的注释。团队成员应当遵循统一的提交规则，一般应当明确的体现出提交的类型以及具体的事情，例如 feat: add message list;</p><h2 id="_6、遵循统一的流程规范" tabindex="-1">6、遵循统一的流程规范 <a class="header-anchor" href="#_6、遵循统一的流程规范" aria-label="Permalink to &quot;6、遵循统一的流程规范&quot;">​</a></h2><p>Git 可以支持很多不同的工作流程：长期分支、功能分支、合并以及 rebase、git-flow 等等。选择什么样的开发流程要取决如下一些因素：项目开发的类型，部署模式和（可能是最重要的）开发团队成员的个人习惯。不管怎样，选择什么样的流程都需要得到所有开发成员的一致认可，并且一直遵循它。</p><h1 id="🌈实际遇到的问题与解决mark" tabindex="-1">🌈实际遇到的问题与解决Mark <a class="header-anchor" href="#🌈实际遇到的问题与解决mark" aria-label="Permalink to &quot;🌈实际遇到的问题与解决Mark&quot;">​</a></h1><h2 id="_1、将本地已有的一个项目上传到新建的git仓库的方法" tabindex="-1">1、将本地已有的一个项目上传到新建的git仓库的方法 <a class="header-anchor" href="#_1、将本地已有的一个项目上传到新建的git仓库的方法" aria-label="Permalink to &quot;1、将本地已有的一个项目上传到新建的git仓库的方法&quot;">​</a></h2><p>将本地已有的一个非git项目上传到新建的git仓库的方法一共有两种。</p><h3 id="i-克隆-拷贝" tabindex="-1">Ⅰ- 克隆+拷贝 <a class="header-anchor" href="#i-克隆-拷贝" aria-label="Permalink to &quot;Ⅰ-  克隆+拷贝&quot;">​</a></h3><blockquote><p>第一种方法比较简单，直接用把远程仓库拉到本地，然后再把自己本地的项目拷贝到仓库中去。然后push到远程仓库上去即可。<strong>此方法适用于本地项目不是一个git仓库的情况。</strong></p><p>具体步骤如下：</p><h4 id="_1、首先克隆" tabindex="-1">1、首先克隆 <a class="header-anchor" href="#_1、首先克隆" aria-label="Permalink to &quot;1、首先克隆&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:yuanmingchen/tensorflow_study.git</span></span></code></pre></div><h4 id="_2、然后复制自己项目的所有文件-除了-git文件-到刚刚克隆下来的仓库中" tabindex="-1">2、然后复制自己项目的所有文件(除了<code>.git</code>文件)到刚刚克隆下来的仓库中 <a class="header-anchor" href="#_2、然后复制自己项目的所有文件-除了-git文件-到刚刚克隆下来的仓库中" aria-label="Permalink to &quot;2、然后复制自己项目的所有文件(除了\`.git\`文件)到刚刚克隆下来的仓库中&quot;">​</a></h4><h4 id="_3、最后push到远程仓库上面去" tabindex="-1">3、最后push到远程仓库上面去： <a class="header-anchor" href="#_3、最后push到远程仓库上面去" aria-label="Permalink to &quot;3、最后push到远程仓库上面去：&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div></blockquote><h3 id="ii-强行合并两个仓库" tabindex="-1">Ⅱ- 强行合并两个仓库 <a class="header-anchor" href="#ii-强行合并两个仓库" aria-label="Permalink to &quot;Ⅱ-  强行合并两个仓库&quot;">​</a></h3><blockquote><p>第二种方法就是先将本地的项目初始化为一个git仓库，然后再强行合并本地仓库和远程仓库，由于这两个仓库是完全不同的两个仓库，所以直接pull都会报错，需要在pull的时候假加上–allow-unrelated-histories才可以pull成功。<strong>此方法适用于本地项目已经是一个git仓库的情况。</strong></p><p>具体步骤如下：</p><h4 id="_1、新建git仓库-将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了-请跳过这一步。在项目根目录下" tabindex="-1">1、新建git仓库，将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了，请跳过这一步。在项目根目录下： <a class="header-anchor" href="#_1、新建git仓库-将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了-请跳过这一步。在项目根目录下" aria-label="Permalink to &quot;1、新建git仓库，将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了，请跳过这一步。在项目根目录下：&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><h4 id="_2、把当前目录下的已有文件-除了-git文件-全部加到刚刚新建的git仓库中" tabindex="-1">2、把当前目录下的已有文件(除了<code>.git</code>文件)全部加到刚刚新建的git仓库中： <a class="header-anchor" href="#_2、把当前目录下的已有文件-除了-git文件-全部加到刚刚新建的git仓库中" aria-label="Permalink to &quot;2、把当前目录下的已有文件(除了\`.git\`文件)全部加到刚刚新建的git仓库中：&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h4 id="_3、保存刚刚加入的文件-并书写保存信息" tabindex="-1">3、保存刚刚加入的文件，并书写保存信息： <a class="header-anchor" href="#_3、保存刚刚加入的文件-并书写保存信息" aria-label="Permalink to &quot;3、保存刚刚加入的文件，并书写保存信息：&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;push current files&quot;</span></span></code></pre></div><h4 id="_4、将本地仓库与远程仓库关联起来" tabindex="-1">4、将本地仓库与远程仓库关联起来： <a class="header-anchor" href="#_4、将本地仓库与远程仓库关联起来" aria-label="Permalink to &quot;4、将本地仓库与远程仓库关联起来：&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:yuanmingchen/tensorflow_study.git</span></span></code></pre></div><h4 id="_5、pull远程仓库的内容-更新本地仓库-使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性-强行合并-关键" tabindex="-1">5、pull远程仓库的内容，更新本地仓库，使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性，强行合并（关键）： <a class="header-anchor" href="#_5、pull远程仓库的内容-更新本地仓库-使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性-强行合并-关键" aria-label="Permalink to &quot;5、pull远程仓库的内容，更新本地仓库，使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性，强行合并（关键）：&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-unrelated-histories</span></span></code></pre></div><h4 id="_6、把本地仓库的内容push到远程仓库" tabindex="-1">6、把本地仓库的内容push到远程仓库： <a class="header-anchor" href="#_6、把本地仓库的内容push到远程仓库" aria-label="Permalink to &quot;6、把本地仓库的内容push到远程仓库：&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p>然后就ok了。</p></blockquote><h3 id="iii-其他git命令" tabindex="-1">Ⅲ- 其他git命令 <a class="header-anchor" href="#iii-其他git命令" aria-label="Permalink to &quot;Ⅲ- 其他git命令&quot;">​</a></h3><blockquote><p>最后附上git的一些其他命令： 1、删除已将关联的远程主机</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span></span></code></pre></div><p>2、查看所有本地分支</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div><p>3、新建一个分支，名字叫xf</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xf</span></span></code></pre></div><p>4、切换分支到xf分支</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xf</span></span></code></pre></div><p>5、把远程分支的代码pull到本地分支：git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 如：取回origin主机的master分支，与本地的xf分支合并，输入命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master:xf</span></span></code></pre></div><p>6、推送当前的分支，git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; PS:注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。 如：把本地的xf分支推送到origin主机的master分支，输入命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xf:master</span></span></code></pre></div></blockquote><h2 id="_2、解决同一台电脑生成两份或多份ssh密钥、公钥映射两个或多个github账号" tabindex="-1">2、解决同一台电脑生成两份或多份ssh密钥、公钥映射两个或多个GitHub账号 <a class="header-anchor" href="#_2、解决同一台电脑生成两份或多份ssh密钥、公钥映射两个或多个github账号" aria-label="Permalink to &quot;2、解决同一台电脑生成两份或多份ssh密钥、公钥映射两个或多个GitHub账号&quot;">​</a></h2><blockquote><p>此解决方案由百度多个方案结合而来,截取对我有用部分</p></blockquote><h3 id="i-需求分析" tabindex="-1">Ⅰ- 需求分析 <a class="header-anchor" href="#i-需求分析" aria-label="Permalink to &quot;Ⅰ- 需求分析&quot;">​</a></h3><blockquote><p>本人注册一个GitHub账户，用来分享本人自己的开源项目或者代码，同时，公司注册了一个GitHub账户，用来分享公司的开源项目。如果按照单个ssh公钥生成的方法则会把之前的公钥覆盖掉，这样将导致其中一方在下一次上传代码，本机和GitHub无法映射成功。</p><p>解决这个问题首先要明确如何生成单个ssh公钥。 ssh生成单个公钥命令：<code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code>。<a href="https://blog.csdn.net/mynameissls/article/details/50528048" target="_blank" rel="noreferrer">如何生成ssh公钥</a> 上述命令会在当前<code>~/.ssh</code>目录下生成<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。其中<code>id_rsa</code>是私钥文件，<code>id_rsa_.pub</code>是公钥文件。 <code>id_rsa</code>和<code>id_rsa_.pub</code>文件都是通过一个邮箱号生成的，同一个公钥文件不可以配置两个不同GitHub账户（已测试）。 那么两个GitHub账户就需要两个不同的邮箱号，来生成两组不同的公钥文件。</p></blockquote><h3 id="ii-解决方案思路" tabindex="-1">Ⅱ- 解决方案思路 <a class="header-anchor" href="#ii-解决方案思路" aria-label="Permalink to &quot;Ⅱ- 解决方案思路&quot;">​</a></h3><blockquote><p>命令：<code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot; -f ~/.ssh/id_rsa_example</code> 示例：分别以791815567@qq.com和galaxysoft@sina.cn两个邮箱在<code>~/.ssh</code>目录下生成两级不同的公钥文件。 791815567@qq.com邮箱：<code>ssh-keygen -t rsa -C &quot;791815567@qq.com&quot; -f ~/.ssh/id_rsa_me</code> galaxysoft@sina.cn邮箱：<code>ssh-keygen -t rsa -C &quot;galaxysoft@sina.cn&quot; -f ~/.ssh/id_rsa_galaxysoft</code> 生成过程可参考<a href="https://blog.csdn.net/mynameissls/article/details/50528048" target="_blank" rel="noreferrer">如何生成单个ssh公钥</a> 这篇文章。 执行完成后，会以<code>~/.ssh</code>目录下看791815567@qq.com邮箱对应的私钥文件<code>id_rsa_me</code>、公钥文件<code>id_rsa_me.pub</code>和galaxysoft@sina.cn邮箱对应的私钥文件<code>id_rsa_galaxysoft</code>、公钥文件<code>id_rsa_galaxysoft.pub</code> 分别在两个GitHub账户中添加对应的公钥信息即可，可参考<a href="https://blog.csdn.net/mynameissls/article/details/50528048" target="_blank" rel="noreferrer">如何生成单个ssh公钥</a> 这篇文章</p></blockquote><h3 id="iii-生成新ssh-key" tabindex="-1">Ⅲ- 生成新ssh key <a class="header-anchor" href="#iii-生成新ssh-key" aria-label="Permalink to &quot;Ⅲ- 生成新ssh key&quot;">​</a></h3><blockquote><p>如果我们电脑上已经存在了一个ssh key，那么我们需要在我们电脑上生成第二个你想在本电脑上使用的id_rsa，使用命令：<code>ssh-keygen -t rsa -C &quot;你的github注册邮箱&quot;</code>。</p><p>下图红色标注部分会提示你把新生成的id_rsa存放到哪里，此处默认会存放在c盘的用户名下的.ssh文件夹下（即你第一个github用户ssh key存放的目录），因此我们需要输入路径/c/Users/DodoMonster/.ssh（注意此路径是你的系统盘下用户目录安放ssh密钥的目录，请使用自己电脑上相对应的目录），最后我以“id_rsa_me”重新命名了ssh key防止默认与已有的ssh key重复。</p><blockquote><p>在输入了路径后，会提示你输入提交项目时输入的验证密码，不输则表示不用密码，这是为了防止别人随便在你的项目上push东西，所以最好还是输入以下你的密码。回车，再重复输入确认回车即可。</p></blockquote></blockquote><h3 id="iv-添加新ssh-key" tabindex="-1">Ⅳ- 添加新ssh key <a class="header-anchor" href="#iv-添加新ssh-key" aria-label="Permalink to &quot;Ⅳ- 添加新ssh key&quot;">​</a></h3><blockquote><p>默认SSH只会读取id_rsa，所以为了让SSH识别新的私钥，需要将其添加到SSH agent 使用命令：<code>ssh-add ~/.ssh/id_rsa_me</code>(后面的是自己取的名字)</p><p>如果报错：Could not open a connection to your authentication agent.无法连接到ssh agent 可执行<code>ssh-agent bash</code>命令后再执行<code>ssh-add</code>命</p><p>然后将公钥添加到git账号中 <a href="https://github.com/settings/keys" target="_blank" rel="noreferrer">https://github.com/settings/keys</a></p></blockquote><h3 id="v-配置config文件" tabindex="-1">Ⅴ- 配置config文件 <a class="header-anchor" href="#v-配置config文件" aria-label="Permalink to &quot;Ⅴ- 配置config文件&quot;">​</a></h3><blockquote><p>查看.ssh文件中是否存在config文件</p><p>如果已存在则直接编辑config文件，命令：<code>vim config</code> #这是linux的命令，进入了vim界面后按<code>a或i或A或I</code>进入编辑模式，编辑完成后按esc键输入<code>:wq</code> 保存文件退出</p><p>如果不存在则需要创建config文件，命令：<code>touch config</code>，再对config文件进行编辑</p><p>对config文件进行配置填写：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Default 第一个账号(123456@xxxx.com)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gsgit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HostName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitee.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PreferredAuthentications</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publickey</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IdentityFile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa_me</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#second 第二个账号（38894403@xxxx.com）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mygit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  HostName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitee.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PreferredAuthentications</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publickey</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IdentityFile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa</span></span></code></pre></div><blockquote><p>其中Host 后的名字可以随意方便自己记忆，但HostName必须为<code>github.com(或者其它git地址)。</code></p></blockquote></blockquote><h3 id="vi-测试是否配置成功" tabindex="-1">Ⅵ- 测试是否配置成功 <a class="header-anchor" href="#vi-测试是否配置成功" aria-label="Permalink to &quot;Ⅵ- 测试是否配置成功&quot;">​</a></h3><blockquote><p>使用命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@zc</span></span></code></pre></div><p>出现欢迎语则为配置成功。</p><p>注意：配置完成后，在连接Host不是github.com的github仓库时，远程库的地址要对应地做一些修改：</p><p>而并非原来的git@github.com</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@gitee.com:hongjilin/cx.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//改为</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@mygit:hongjilin/cx.git</span></span></code></pre></div><p>这样每次连接都会使用id_rsa_me与服务器进行连接。</p><p>配置至此，大功告成！</p></blockquote><h3 id="vii-问题mark" tabindex="-1">Ⅶ- 问题Mark <a class="header-anchor" href="#vii-问题mark" aria-label="Permalink to &quot;Ⅶ- 问题Mark&quot;">​</a></h3><blockquote><p>当我切换到另外一个账号提交时 commit的提交者仍寻找全局配置中的username作为签名 而不是当前本地库绑定提交账号的用户名(所以我用公司账号的<code>.ssh</code>配置绕过了组织检测,但是署名却用的是个人账户)</p><p>别小看这个BUG,挺恐怖的,下面举个我的栗子:</p><p><img src="`+g+'" alt="image-20210621172453710"></p><p>到这时候你可能觉得好像也没啥吧?但是我个人账号不是公司组织里面的(也不好解释)、计算公司个人绩效时也无法统计、之前版本还无法用搜索条件查找我个人账号(因为本身个人账号就不是组织里面的)的提交.....问题可大可小</p><p>所以此处<code>Mark</code>,留待后续学习生活解决</p></blockquote><h4 id="此问题解决" tabindex="-1">此问题解决 <a class="header-anchor" href="#此问题解决" aria-label="Permalink to &quot;此问题解决&quot;">​</a></h4><blockquote><p>之前只是将此问题Mark,但是未将解决方式具体写下,现将其更新</p><p><img src="'+u+`" alt="image-20210621171934972"></p><p>或者可以直接写个python小脚本来修改:如果根据该仓库clone时的账号来进行切换是否更合理,这是个好办法...</p></blockquote><h2 id="_3、commit报错无法提交" tabindex="-1">3、commit报错无法提交 <a class="header-anchor" href="#_3、commit报错无法提交" aria-label="Permalink to &quot;3、commit报错无法提交&quot;">​</a></h2><blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> running pre-commit hook: lint-staged</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[STARTED] Preparing...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[FAILED] warning: LF will be replaced by CRLF in sh.exe.stackdump.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[FAILED] The file will have its original line endings in your working directory.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[STARTED] Running tasks...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[SKIPPED] Skipped because of previous git error.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[STARTED] Applying modifications...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[SKIPPED]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[SKIPPED]   × lint-staged failed due to a git error.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">×</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint-staged</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> due</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[STARTED] Cleaning up...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[SKIPPED]   × lint-staged failed due to a git error.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> modifications</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restored</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash:</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pre-commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hook</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (add </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--no-verify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bypass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>解决方式</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">执行npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint，</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 根据提示修改错误（推荐）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-verify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 绕过了lint的检查</span></span></code></pre></div></blockquote><h2 id="_4、git提交时出现-合并提示-merge-branch-master-of-之解决方法" tabindex="-1">4、Git提交时出现(<code>合并提示</code>)<code>Merge branch &#39;master&#39; of ...</code>之解决方法 <a class="header-anchor" href="#_4、git提交时出现-合并提示-merge-branch-master-of-之解决方法" aria-label="Permalink to &quot;4、Git提交时出现(\`合并提示\`)\`Merge branch &#39;master&#39; of ...\`之解决方法&quot;">​</a></h2><blockquote><p>多人协作开发项目，在上传代码时通常会先pull一下远程代码，使本地与远程同步更新，但是如果远程此时与自己代码存在冲突，在解决冲突后提交有时会出现“Merge branch ‘master’ of …”这条信息。这是因为pull其本质是fetch+Merge的结合。通常会分为以下两种情况：</p><p>1.如果远程分支超前于本地分支，并且本地也没有commit操作，此时pull会采用’fast-forward’模式，该模式不会产生合并节点，也即不产生&quot;Merge branch ‘master’ of …&quot;信息。</p><p>2.如果本地有commit提交，此时若存在冲突，pull拉取代码时远程和本地会出现分叉，会进行分支合并，就会产生&quot;Merge branch ‘master’ of …&quot;信息。</p><p><strong>解决方法</strong></p><blockquote><p>使用<code>git pull --rebase</code>命令，如果没有冲突,则会直接合并，如果存在冲突，手动解决冲突即可，不会再产生那条多余的信息。如果你不想每次都rebase，可以在git bash里执行</p></blockquote><blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull.rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div></blockquote><blockquote><p>这个配置就是告诉git在每次pull前先进行rebase操作。</p></blockquote></blockquote><h3 id="_1-可能出现的相关报错error-cannot-pull-with-rebase" tabindex="-1">① 可能出现的相关报错<code>error:Cannot pull with rebase</code> <a class="header-anchor" href="#_1-可能出现的相关报错error-cannot-pull-with-rebase" aria-label="Permalink to &quot;① 可能出现的相关报错\`error:Cannot pull with rebase\`&quot;">​</a></h3><blockquote><ol><li>git 执行<code>git pull –rebase</code>后报错误如下：</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cannot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> contains</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uncommitted</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changes.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> please</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> them.</span></span></code></pre></div><ol start="2"><li><p>原因：如果有未提交的更改，是不能git pull的</p></li><li><p>解决：</p></li></ol><ul><li>先执行<code>git stash</code> --&gt;#可用来暂存当前正在进行的工作</li><li>再执行<code>git pull –-rebase</code></li><li>最后再执行<code>git stash pop</code> --&gt;#从Git栈中读取最近一次保存的内容</li></ul><ol start="4"><li>截图示例</li></ol><p><img src="`+F+'" alt="image-20210705115521085"></p></blockquote><h3 id="_2-防止冲突的有效操作" tabindex="-1">② <em>防止冲突的有效操作</em> <a class="header-anchor" href="#_2-防止冲突的有效操作" aria-label="Permalink to &quot;② *防止冲突的有效操作*&quot;">​</a></h3><blockquote><p>不要直接用<code>git pull</code>拉取,而是分开操作,先拉取代码(拉取后可以先查看冲突部分取解决).随后再去合并</p><ol><li><code>git fetch 别名</code>(将修改同步到远程跟踪分支上)</li><li>git merge 远程跟踪分支</li></ol></blockquote><h2 id="_5、git删除误提交的大文件历史记录" tabindex="-1">5、Git删除误提交的大文件历史记录 <a class="header-anchor" href="#_5、git删除误提交的大文件历史记录" aria-label="Permalink to &quot;5、Git删除误提交的大文件历史记录&quot;">​</a></h2><blockquote><ol><li>应用场景:在我们日常使用Git的时候，一般比较小的项目，我们可能不会注意到.git 这个文件。其实.git文件主要用来记录每次提交的变动，当我们的项目越来越大的时候，我们发现.git文件越来越大。很大的可能是因为提交了大文件，如果你提交了大文件，那么即使你在之后的版本中将其删除，但是<code>实际上记录中的大文件仍然存在</code>。</li><li>原因分析:为什么呢？仔细想一想，虽然你在后面的版本中删除了大文件，但是Git是有版本倒退功能的吧，那么如果大文件不记录下来，git拿什么来给你回退呢？</li><li>导致的问题:.git文件越来越大导致的问题是--每次拉项目都要耗费大量的时间，并且每个人都要花费那么多的时间。</li><li>git给出了解决方案，使用git branch-filter来遍历git history tree, 可以永久删除history中的大文件，达到让.git文件瘦身的目的。</li></ol><p>下面给出步骤（以下步骤非常危险，<code>操作需谨慎!</code>,最好最好不要在公司项目中使用）</p></blockquote><h3 id="i-列出仓库中最大的几个对象及其文件名" tabindex="-1">Ⅰ-列出仓库中最大的几个对象及其文件名 <a class="header-anchor" href="#i-列出仓库中最大的几个对象及其文件名" aria-label="Permalink to &quot;Ⅰ-列出仓库中最大的几个对象及其文件名&quot;">​</a></h3><blockquote><p>列出所有仓库中的对象（包括SHA值、大小、路径等），并按照大小降序排列，列出TOP 5(本人示例,你也可多展示)</p><ol><li>命令示例</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rev-list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --objects</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> verify-pack </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git/objects/pack/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sort</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -k</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> awk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -F</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;  &#39;{print $1}&#39;)&quot;</span></span></code></pre></div><ol start="2"><li>图示</li></ol><p><img src="'+b+'" alt="image-20210508171542001"></p></blockquote><h3 id="ii-将某文件从历史记录中删除" tabindex="-1">Ⅱ-将某文件从历史记录中删除 <a class="header-anchor" href="#ii-将某文件从历史记录中删除" aria-label="Permalink to &quot;Ⅱ-将某文件从历史记录中删除&quot;">​</a></h3><blockquote><p>既然文件找到了(此处删除<code>杂记_其他(如破解与配置)的碎片化笔记/Typora笔记软件分享/tools/软件包/Typora.dmg</code>)，那么得将该文件从历史记录中删除，执行以下命令：</p><ol><li>命令示例:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pretty=oneline</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --branches</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;杂记_其他(如破解与配置)的碎片化笔记/Typora笔记软件分享/tools/软件包/Typora.dmg&quot;</span></span></code></pre></div><ol start="2"><li>图示</li></ol><p><img src="'+m+'" alt="image-20210508171916951"></p></blockquote><h3 id="iii-重写所有-commit-将该文件从-git-历史中完全删除" tabindex="-1">Ⅲ-重写所有 commit，将该文件从 Git 历史中完全删除 <a class="header-anchor" href="#iii-重写所有-commit-将该文件从-git-历史中完全删除" aria-label="Permalink to &quot;Ⅲ-重写所有 commit，将该文件从 Git 历史中完全删除&quot;">​</a></h3><blockquote><p>上面的命令执行后只是从历史记录中移除，还没有完全删除它，我们需要重写所有 commit，将该文件从 Git 历史中完全删除：</p><ol><li>代码示例:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filter-branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --index-filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;git rm --cached --ignore-unmatch  &quot;杂记_其他(如破解与配置)的碎片化笔记/Typora笔记软件分享/tools/软件包/Typora.dmg&quot;&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span></span></code></pre></div><ol start="2"><li>图示</li></ol><p><img src="'+y+`" alt=""></p><ol start="3"><li>补充注意点:</li></ol><p>如果你像我一样,工作区有新写的内容没有追踪与提交导致无法进行删除操作时,千万不要直接暂存<code>stash</code>,否则这些没有暂存的内容就没了,要记得先<code>git add .</code></p></blockquote><h3 id="iv-把该文件的引用完全删除" tabindex="-1">Ⅳ-把该文件的引用完全删除 <a class="header-anchor" href="#iv-把该文件的引用完全删除" aria-label="Permalink to &quot;Ⅳ-把该文件的引用完全删除&quot;">​</a></h3><blockquote><p>上面的命令执行后，此时历史记录中已经没有该文件了，此时是真正删除了它。 不过我们运行 filter-branch 产生的日志还是会对该文件有引用，所以我们还需要运行以下几条命令，把该文件的引用完全删除：</p><ol><li>命令示例:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git/refs/original/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reflog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> expire</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --expire=now</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prune=now</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --aggressive</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prune=now</span></span></code></pre></div><ol start="2"><li>图示</li></ol><p><img src="`+C+'" alt="image-20210510183253770"></p><ol start="3"><li>果真编程其实殊途同归,该学的都得学,这里就暴露的Linux没学好的弊端,所以暗下决心,争取今年内将linux系统学习一遍</li></ol></blockquote><h3 id="v-强制提交" tabindex="-1">Ⅴ-强制提交 <a class="header-anchor" href="#v-强制提交" aria-label="Permalink to &quot;Ⅴ-强制提交&quot;">​</a></h3><blockquote><p>现在我们再看 .git 文件的大小明显变小了，少了那个大文件，说明我们之前误提交的大文件已经删除了。 最后一步就是 push 代码了，不过就是需要强制 push</p><ol><li>命令示例</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span></span></code></pre></div><ol start="2"><li>图示</li></ol><p><img src="'+q+'" alt=""></p></blockquote><h3 id="vi-远程仓库gc" tabindex="-1">Ⅵ-远程仓库GC <a class="header-anchor" href="#vi-远程仓库gc" aria-label="Permalink to &quot;Ⅵ-远程仓库GC&quot;">​</a></h3><blockquote><p>网上所能百度的方法中都没有说到要进行远程存储库GC,但是本人操作后发现,明明命令行中运行了<code>git gc</code>,但你的远程仓库仍然会非常庞大甚至更加庞大,也许你本地已经删减至几十兆,但是远程仓库已经&quot;爆仓&quot;达到<code>1300+兆</code>,详见<code>问题7</code></p><p><img src="'+p+'" alt="image-20210510180757993"></p></blockquote><h3 id="vii-删除前后-git大小对比" tabindex="-1">Ⅶ-删除前后<code>.git</code>大小对比 <a class="header-anchor" href="#vii-删除前后-git大小对比" aria-label="Permalink to &quot;Ⅶ-删除前后`.git`大小对比&quot;">​</a></h3><blockquote><p>本人此时测试删除的文件正好为10M,成功删除</p><ol><li>删除前截图</li></ol><img src="'+E+'" style="zoom:67%;"><ol start="2"><li>删除后截图</li></ol><img src="'+B+'" style="zoom:67%;"><ol start="3"><li>删除多个文件后</li></ol><img src="'+v+'" alt="image-20210508182039450" style="zoom:67%;"></blockquote><h2 id="_6、git出现文件夹后面跟-数字问题" tabindex="-1">6、git出现文件夹后面跟<code>@+数字</code>问题 <a class="header-anchor" href="#_6、git出现文件夹后面跟-数字问题" aria-label="Permalink to &quot;6、git出现文件夹后面跟`@+数字`问题&quot;">​</a></h2><blockquote><ol><li><p>问题出现场景:本人欲将两个仓库代码合到一个仓库中,但是原本文件夹内还有.git，导致这些文件夹push后变成了子模块</p></li><li><p>问题场景图例--&gt;具体出问题时并没有截图,此处截图提交时差别(原本应该是一大堆V1.0的文件,结果只有一个文件夹,后面跟着哈希值)</p></li></ol><p><img src="'+_+'" alt="image-20210510171915185"></p><ol start="3"><li>解决思路</li></ol><blockquote><p>删除原来的子文件夹的.git --&gt;<code>rm -r .git</code>,当然也可以手动删除</p><p>删除本地git缓存 --&gt;<code>git rm -r --cached fileName</code></p><p>重新add，push</p></blockquote><ol start="4"><li>解决结果截图</li></ol><img src="'+f+'" alt="image-20210510172159472" style="zoom:67%;"></blockquote><h2 id="_7、远程仓库过大导致无法push" tabindex="-1">7、远程仓库过大导致无法push <a class="header-anchor" href="#_7、远程仓库过大导致无法push" aria-label="Permalink to &quot;7、远程仓库过大导致无法push&quot;">​</a></h2><blockquote><p>问题出现场景:在前两天本人发现笔记仓库过大 已经达到600M的时候,本人花了一些时间将无用的大文件删除(详见<code>问题5</code>),并且减小到了100M+,然后推送上了gitee上,但是今天push的时候突然报错仓库过大无法推送</p><ol><li><p>问题报错截图<img src="'+x+'" alt="image-20210510180415796"></p></li><li><p>本人就产生很大的疑惑,明明我本地仓库才100+M,<code>.git</code>文件也才86M,但是远程仓库竟然达到了恐怖的1300M+(当时急于寻找解决方案,没有截图)</p></li></ol><p>本人推测(不确定,也找不到人问,朋友都没经历过这个情况,所以引出记录待定,如果有小伙伴知道了希望可以发在评论区或者私信我)</p><ol><li><p>当时我是将多条命令一起复制进去运行,可能导致<code>git gc</code>命令没有运行到(可能性极小,但还是留下悔恨的泪水)</p></li><li><p>也许本地的gc命令只是清理了本地仓库的,远程也要清理,但这个并不重要,知道了这个点后我们能进行解决了</p><p><img src="'+A+'" alt="image-20210510180539437" style="zoom:50%;"><img src="'+D+'" alt="image-20210510181407805" style="zoom:67%;"></p></li><li><p>问题解决:</p></li></ol><p><img src="'+p+'" alt="image-20210510180757993"></p><p>GC后内存<img src="'+P+'" alt="image-20210510181329197"></p><ol start="4"><li>GC详解</li></ol><blockquote><p>Git的底层并没有采用 CVS、SVN 底层所采用的那套增量式文件系统，而是采用一套自行维护的存储文件系统。当文件变动发生提交时，该文件系统存储的不是文件的差异信息，而是文件快照，即整个文件内容，并保存指向快照的索引。这种做法，提高 Git 分支的使用效率；但也容易导致代码仓库中内容重复程度过高，从而仓库体积过大。当遇到这种情况时，或者需要将仓库推送到远程主机时，就需要Git中的gc（garbage collect）功能，也就是<code>垃圾回收功能</code>。</p><p>大体来说，当运行 &quot;git gc&quot; 命令时，Git会收集所有松散对象并将它们存入 packfile，合并这些 packfile 进一个大的 packfile，然后将不被任何 commit 引用并且已存在一段时间 (数月) 的对象删除。 此外，Git还会将所有引用 (references) 并入一个单独文件。</p><p>就细节而言，Git做了这几件事：</p><p>pack_refs 过程 reflog expire 过程 repack 过程 prune 过程 rerere 过程</p><p>pack_refs 过程相当于执行&quot;git pack-refs --all --prune&quot;，它会将$GIT_DIR/refs目录下的所有heads和tags打包成一个文件并保存为$GIT_DIR/packed-refs下。</p><p>reflog expire 过程相当于执行&quot;git reflog expire --all&quot;，它会将删除所有超过期限而且没有被refs涉及的reflog条目。</p><p>repack 过程相当于执行&quot;git repack -d -l&quot;，一般情况下还会包括&quot;-A&quot;选项，它会将所有未被包含在一个pack的松散对象连结成一个pack，也会将现有的pack重新组织为一个新的更有效率的pack，并删除冗余的pack（如果她们中存在不可达的松散对象，会先把这些对象释放出来）。</p><p>prune 过程相当于执行&quot;git prune --expire&quot;，他会删除所有过期的、不可达的且未被打包的松散对象。</p><p>rerere 过程相当于执行&quot;git rerere gc&quot;，这种情形下似乎没什么用。</p><p>所以本人推测应该是进行了<code>问题5</code>操作后还需要<code>进行一次GC操作</code></p></blockquote></blockquote><h2 id="_8、git-gui中文乱码问题解决方法" tabindex="-1">8、Git GUI中文乱码问题解决方法 <a class="header-anchor" href="#_8、git-gui中文乱码问题解决方法" aria-label="Permalink to &quot;8、Git GUI中文乱码问题解决方法&quot;">​</a></h2><blockquote><p>当我们使用Git GUI的查看代码的时候，有时候会出现中文乱码：</p><ol><li>解决方案1:直接在<code>GIT GUI</code>中操作</li></ol><p>**<img src="'+G+`" alt="image-20210701180547401"></p><ol start="2"><li>解决方案2:命令行</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gui.encoding</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> utf-8</span></span></code></pre></div><ol start="3"><li>解决方案3:直接修改配置文件</li></ol><blockquote><p>在软件的安装目录下，在<code>Git\\mingw32\\etc\\gitconfig</code>文件末尾添加：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[gui]encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">utf-8</span></span></code></pre></div></blockquote></blockquote><h2 id="_9、git-切换远程仓库地址" tabindex="-1">9、Git 切换远程仓库地址 <a class="header-anchor" href="#_9、git-切换远程仓库地址" aria-label="Permalink to &quot;9、Git 切换远程仓库地址&quot;">​</a></h2><blockquote><p>在公司开发中,也许会遇到公司项目地址迁移的问题(本人就遇到了) : 比如从码云gitee上将项目迁移到gitLab上,那么我们本地怎么切换远程仓库地址呢? 很简单!</p><ol><li>切换远程仓库地址</li></ol><ul><li><p><strong>方式一：修改远程仓库地址</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> URL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #更换远程仓库地址，URL为新地址。一步到胃</span></span></code></pre></div></li><li><p><strong>方式二：先删除远程仓库地址，然后再添加</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #删除现有远程仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> url</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #添加新远程仓库</span></span></code></pre></div></li></ul><ol start="2"><li>查看远程仓库地址</li></ol><blockquote><p>没错,改完了,很简单是吧,但是你怎么确定自己是否修改成功了呢?</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #查看远程仓库的地址</span></span></code></pre></div></blockquote><ol start="3"><li>截图示例</li></ol><blockquote><p><img src="`+S+'" alt="Git 切换远程仓库地址"></p></blockquote></blockquote><h2 id="_10、如何撤销-commit-提交" tabindex="-1">10、如何撤销 commit 提交 <a class="header-anchor" href="#_10、如何撤销-commit-提交" aria-label="Permalink to &quot;10、如何撤销 commit 提交&quot;">​</a></h2><blockquote><ol><li>一般我们写完代码后,是这样提交的:</li></ol><ul><li>git add . //添加追踪所有文件</li><li>git commit -m &quot;feat(前端-Git学习详细笔记):更新撤销commit操作&quot; //添加commit提交信息</li></ul><ol start="2"><li>但是commit写完提交信息后,突然想到还有一个地方代码没改到/保存,如果放到下一个commit却不合适(同一个功能修改,分成两个commit),原因详见上方的 <a href="https://gitee.com/hongjilin/hongs-study-notes/tree/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0#%E2%85%A3-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99" target="_blank" rel="noreferrer">版本控制工具的使用基本原则</a></li><li>执行此命令命令:<code>git reset --soft HEAD^</code></li></ol><ul><li>HEAD^的意思是上一个版本，也可以写成HEAD~1</li><li>如果你进行了2次commit，想都撤回，可以使用HEAD~2</li><li>详见 <a href="https://gitee.com/hongjilin/hongs-study-notes/tree/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0#reset%E4%B8%89%E9%83%A8%E6%9B%B2" target="_blank" rel="noreferrer">reset三部曲</a></li></ul><p>作用:将文件从<code>暂存区中撤回</code>到工作目录中(仅仅是撤回commit操作，你写的代码仍然保留)</p></blockquote><h2 id="_11、错误的git-push提交成功后如何撤销回退" tabindex="-1">11、错误的git push提交成功后如何撤销回退 <a class="header-anchor" href="#_11、错误的git-push提交成功后如何撤销回退" aria-label="Permalink to &quot;11、错误的git push提交成功后如何撤销回退&quot;">​</a></h2><blockquote><p>我们在使用Git进行版本控制时，有可能会出现这种情况。git push后发现提交的内容不是想要的，这时候我们怎么做呢，提交上去的内容是没有删除按钮的（比如github，或码云）。所以我们需要一些手段将提交上去内容撤销下来。</p><p>而要撤销,就要用到上面所学的 <code>git reset</code></p></blockquote><h3 id="_1、错误场景示范-1" tabindex="-1">1、错误场景示范 <a class="header-anchor" href="#_1、错误场景示范-1" aria-label="Permalink to &quot;1、错误场景示范&quot;">​</a></h3><blockquote><p>Ⅰ- 当我撰写 [ commit ] 信息没注意到,以为是对的时候直接提交 --&gt; 因为本人提交笔记时喜欢按 [ ↑ ] 找到之前的提交信息进行修改</p><p>Ⅱ- 此时可以看到,错误的 [ commit ] 已经提交了 (当然,适用场景不只是commit ,也可错误代码之类的)</p><p><img src="'+i+'" alt="image-20210813155746112"></p></blockquote><h3 id="_2、回退操作-1" tabindex="-1">2、回退操作 <a class="header-anchor" href="#_2、回退操作-1" aria-label="Permalink to &quot;2、回退操作&quot;">​</a></h3><blockquote><p>咱们操作稳重一点,使用git reset --soft HEAD~就好了(如果回退后代码也不想要,可以用<code>git stash</code>,暂存,达到代码也回退的效果)</p></blockquote><h4 id="_1-git-reflog-1" tabindex="-1">① git reflog <a class="header-anchor" href="#_1-git-reflog-1" aria-label="Permalink to &quot;① git reflog&quot;">​</a></h4><blockquote><p>commits，它在git中扮演了一个重要角色，我们平常用的一些操作git clone ,git commit 都会产生commits，通俗的讲这个就是版本号，但是git reset并不会产生commits（不是不会产生，而是会产生 但是都是一样的），我们可以先看看自己项目中的commits，使用如下命令:<code>git reflog</code></p><p><img src="'+s+'" alt="image-20210813154309057"></p></blockquote><h4 id="_2-git-reset-soft-head-1" tabindex="-1">② git reset --soft HEAD~ <a class="header-anchor" href="#_2-git-reset-soft-head-1" aria-label="Permalink to &quot;②  git  reset --soft HEAD~&quot;">​</a></h4><blockquote><p>运行此代码后,我们的 [ HEAD ] 指向了上一个 [ commits ]</p><p><img src="'+a+'" alt="image-20210813154448889"></p></blockquote><h4 id="_3-查看缓存-1" tabindex="-1">③ 查看缓存 <a class="header-anchor" href="#_3-查看缓存-1" aria-label="Permalink to &quot;③  查看缓存&quot;">​</a></h4><blockquote><ul><li><p>此时你可以用<code>stash staus</code>查看,会发现,之前提交的代码已经放回缓存区了</p></li><li><p>如果你不想要此次提交所有代码,可以使用<code>git stash</code> ,然后再去清空即可(当然,本人此处还是需要的,所以要留下)</p><p><img src="'+t+'" alt="image-20210813154839981"></p></li></ul></blockquote><h4 id="_4-重新撰写-commit-信息-1" tabindex="-1">④ 重新撰写 [ commit ]信息 <a class="header-anchor" href="#_4-重新撰写-commit-信息-1" aria-label="Permalink to &quot;④ 重新撰写 [ commit ]信息&quot;">​</a></h4><blockquote><p><img src="'+e+'" alt="image-20210813154928064"></p></blockquote><h4 id="_5-强制提交-1" tabindex="-1">⑤ 强制提交 <a class="header-anchor" href="#_5-强制提交-1" aria-label="Permalink to &quot;⑤ 强制提交&quot;">​</a></h4><blockquote><p>如果你重新撰写 [ commit ] 后马上重新push,你会发现无法提交: 因为我们当前落后远程一个版本!</p><p>所以此时直接强制提交即可,就能覆盖远程提交记录</p><blockquote><p><code>git push -f</code></p></blockquote><p><img src="'+l+'" alt="image-20210813155049169"></p></blockquote><h3 id="_3、成功展示-1" tabindex="-1">3、成功展示 <a class="header-anchor" href="#_3、成功展示-1" aria-label="Permalink to &quot;3、成功展示&quot;">​</a></h3><blockquote><ul><li>在网站工作台首页能看到已经将更改后的 [ coommit ] 强制推送上来了</li></ul><p>也许你会奇怪:为啥工作台上还能看到? 其实已经删了!!!你看下方</p><p><img src="'+h+'" alt="image-20210813155614570"></p><ul><li>但是你查看提交记录,会发现之前错误的commit已经被覆盖</li></ul><img src="'+o+`" alt="image-20210813155339300" style="zoom:80%;"></blockquote><h2 id="_12、如何删除指定的某个commit提交-连带提交的内容一起删除" tabindex="-1">12、如何删除指定的某个commit提交（连带提交的内容一起删除） <a class="header-anchor" href="#_12、如何删除指定的某个commit提交-连带提交的内容一起删除" aria-label="Permalink to &quot;12、如何删除指定的某个commit提交（连带提交的内容一起删除）&quot;">​</a></h2><blockquote><p>如果我们提交了错误的某个提交，例如提交错了分支，但是在你提交后已经有别人再进行了提交，这时候你如果只想撤回自己的提交而不影响其他人的话，就可以用这种操作</p><p>比如我的提交历史如下，我现在想删除<code>commit_这是你的错误提交</code>，但是不影响<code>commit_这是你的错误提交</code>之后的提交历史</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commit_这是别人的提交 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commit_这是别人的提交2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commit_这是你的错误提交</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commit_这是更早之前的提交</span></span></code></pre></div></blockquote><h3 id="_1、全部操作" tabindex="-1">1、全部操作 <a class="header-anchor" href="#_1、全部操作" aria-label="Permalink to &quot;1、全部操作&quot;">​</a></h3><blockquote><ol><li>git log获取commit信息 --需要拿需要删除的commit的id</li><li>git rebase -i (要删除的commit的下一个commit号，这个很重要不懂的看下面示例 )</li><li>编辑文件，将要删除的commit之前的单词改为drop （vim编辑器要按 i 键进入插入模式）</li><li>保存文件退出（vim编辑器 :wq 退出）</li><li>git log查看（此时commit记录已经删除）</li><li>确认无误后输入<code>git push origin HEAD --force</code>推送到远程仓库</li></ol></blockquote><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h4 id="i-模拟场景" tabindex="-1">Ⅰ - 模拟场景 <a class="header-anchor" href="#i-模拟场景" aria-label="Permalink to &quot;Ⅰ - 模拟场景&quot;">​</a></h4><blockquote><p><img src="`+H+'" alt="image-20230202180342427"></p></blockquote><h4 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-label="Permalink to &quot;&quot;">​</a></h4><blockquote></blockquote><h4 id="iii-git-rebase-i-要删除的提交的上一个提交的id" tabindex="-1">Ⅲ -<code> git rebase -i 要删除的提交的上一个提交的id</code> <a class="header-anchor" href="#iii-git-rebase-i-要删除的提交的上一个提交的id" aria-label="Permalink to &quot;Ⅲ -` git rebase -i 要删除的提交的上一个提交的id`&quot;">​</a></h4><blockquote><p>这里要注意，是上一个提交的id，在步骤Ⅱ中已经进行了图例，输入下面的指令后回车进入</p><p><img src="'+w+'" alt="image-20230202181026096"></p><p>这样就会进入这样一个界面：</p><p><img src="'+j+'" alt="image-20230202181113966"></p></blockquote><h4 id="iv-编辑文件-将要删除的commit之前的单词改为drop" tabindex="-1">Ⅳ- 编辑文件，将要删除的commit之前的单词改为drop <a class="header-anchor" href="#iv-编辑文件-将要删除的commit之前的单词改为drop" aria-label="Permalink to &quot;Ⅳ- 编辑文件，将要删除的commit之前的单词改为drop&quot;">​</a></h4><blockquote><p>vim编辑器要按 i 键进入插入模式,将要删除的commit之前的单词改为drop</p><p><img src="'+I+'" alt="image-20230202181232404"></p><p>退出并保存</p><p><img src="'+T+'" alt="image-20230202181351114"></p></blockquote><h4 id="v-查看是否成功" tabindex="-1">Ⅴ-查看是否成功 <a class="header-anchor" href="#v-查看是否成功" aria-label="Permalink to &quot;Ⅴ-查看是否成功&quot;">​</a></h4><blockquote><p>此时查看本地提交记录以及文件，应该已经删除了</p><p><img src="'+M+'" alt="image-20230202181550351"></p></blockquote><h4 id="vi-确认无误后提交" tabindex="-1">Ⅵ-确认无误后提交 <a class="header-anchor" href="#vi-确认无误后提交" aria-label="Permalink to &quot;Ⅵ-确认无误后提交&quot;">​</a></h4><blockquote><p>确认无误后输入<code>git push origin HEAD --force</code>推送到远程仓库</p><p>·</p></blockquote>',278),z=[U];function L(K,N,V,$,J,Y){return c(),k("div",null,z)}const O=n(R,[["render",L]]);export{Z as __pageData,O as default};
